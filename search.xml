<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>棋牌游戏-1</title>
    <url>/2024/07/31/%E6%A3%8B%E7%89%8C%E6%B8%B8%E6%88%8F-1/</url>
    <content><![CDATA[<p>思考并回答以下问题：</p>
<span id="more"></span>
<img src="/2024/07/31/%E6%A3%8B%E7%89%8C%E6%B8%B8%E6%88%8F-1/1.png" class="">
<p>ws_manager是管理websocket这个系统的连接和关闭的。</p>
<p>ws_connection是管理每一个人的连接</p>
<p>session是管理每一个人的会话</p>
<p>这种概念是从大到小的。</p>
<blockquote>
<p>framework/net/session.go</p>
</blockquote>
<p>session是会话的意思。</p>
<p>无任何依赖，就是围绕着一个map，把一些数据放进和读取</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> net</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;sync&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Session <span class="keyword">struct</span> &#123;</span><br><span class="line">    sync.RWMutex</span><br><span class="line">    Cid  <span class="type">string</span> <span class="comment">// 一个随机的字符串</span></span><br><span class="line">    Uid  <span class="type">string</span> <span class="comment">// 用户id</span></span><br><span class="line">    data <span class="keyword">map</span>[<span class="type">string</span>]any</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewSession</span><span class="params">(cid <span class="type">string</span>)</span></span> *Session &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Session&#123;</span><br><span class="line">        Cid:  cid,</span><br><span class="line">        data: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]any),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Session)</span></span> Put(key <span class="type">string</span>, v any) &#123;</span><br><span class="line">    s.Lock()</span><br><span class="line">    <span class="keyword">defer</span> s.Unlock()</span><br><span class="line">    s.data[key] = v</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Session)</span></span> Get(key <span class="type">string</span>) (any, <span class="type">bool</span>) &#123;</span><br><span class="line">    s.RLock()</span><br><span class="line">    <span class="keyword">defer</span> s.RUnlock()</span><br><span class="line">    v, ok := s.data[key]</span><br><span class="line">    <span class="keyword">return</span> v, ok</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Session)</span></span> SetData(uid <span class="type">string</span>, data <span class="keyword">map</span>[<span class="type">string</span>]any) &#123;</span><br><span class="line">    s.Lock()</span><br><span class="line">    <span class="keyword">defer</span> s.Unlock()</span><br><span class="line">    <span class="keyword">if</span> s.Uid == uid &#123;</span><br><span class="line">        <span class="keyword">for</span> k, v := <span class="keyword">range</span> data &#123;</span><br><span class="line">            s.data[k] = v</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>framework/net/connection.go</p>
</blockquote>
<p>依赖Session</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> net</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Connection <span class="keyword">interface</span> &#123;</span><br><span class="line">    Close()</span><br><span class="line">    SendMessage(buf []<span class="type">byte</span>) <span class="type">error</span></span><br><span class="line">    GetSession() *Session</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每个人发送的消息格式</span></span><br><span class="line"><span class="keyword">type</span> MsgPack <span class="keyword">struct</span> &#123;  </span><br><span class="line">    Cid  <span class="type">string</span></span><br><span class="line">    Body []<span class="type">byte</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>framework/net/ws_connection.go</p>
</blockquote>
<p>就依赖了一个日志包</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> net</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;common/logs&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/google/uuid&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/gorilla/websocket&quot;</span></span><br><span class="line">    <span class="string">&quot;sync/atomic&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cidBase <span class="type">uint64</span> = <span class="number">10000</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    pongWait             = <span class="number">10</span> * time.Second</span><br><span class="line">    writeWait            = <span class="number">10</span> * time.Second</span><br><span class="line">    pingInterval         = (pongWait * <span class="number">9</span>) / <span class="number">10</span></span><br><span class="line">    maxMessageSize <span class="type">int64</span> = <span class="number">1024</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> WsConnection <span class="keyword">struct</span> &#123;</span><br><span class="line">    Cid        <span class="type">string</span></span><br><span class="line">    Conn       *websocket.Conn <span class="comment">// 核心的是这个，维护每个人的连接</span></span><br><span class="line">    manager    *Manager        <span class="comment">// 从这里拿到Conn</span></span><br><span class="line">    ReadChan   <span class="keyword">chan</span> *MsgPack   <span class="comment">// 通过channel来读取和写消息</span></span><br><span class="line">    WriteChan  <span class="keyword">chan</span> []<span class="type">byte</span></span><br><span class="line">    Session    *Session</span><br><span class="line">    pingTicker *time.Ticker</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *WsConnection)</span></span> GetSession() *Session &#123;</span><br><span class="line">    <span class="keyword">return</span> c.Session</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *WsConnection)</span></span> SendMessage(buf []<span class="type">byte</span>) <span class="type">error</span> &#123;</span><br><span class="line">    c.WriteChan &lt;- buf</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *WsConnection)</span></span> Close() &#123;</span><br><span class="line">    <span class="keyword">if</span> c.Conn != <span class="literal">nil</span> &#123;</span><br><span class="line">        c.Conn.Close()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> c.pingTicker != <span class="literal">nil</span> &#123;</span><br><span class="line">        c.pingTicker.Stop()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *WsConnection)</span></span> Run() &#123;</span><br><span class="line">    <span class="keyword">go</span> c.readMessage()</span><br><span class="line">    <span class="keyword">go</span> c.writeMessage()</span><br><span class="line">    <span class="comment">//做一些心跳检测 websocket中 ping pong机制</span></span><br><span class="line">    c.Conn.SetPongHandler(c.PongHandler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *WsConnection)</span></span> writeMessage() &#123;</span><br><span class="line"></span><br><span class="line">    c.pingTicker = time.NewTicker(pingInterval)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> message, ok := &lt;-c.WriteChan:</span><br><span class="line">            <span class="keyword">if</span> !ok &#123;</span><br><span class="line">                <span class="keyword">if</span> err := c.Conn.WriteMessage(websocket.CloseMessage, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">                    logs.Error(<span class="string">&quot;connection closed, %v&quot;</span>, err)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> err := c.Conn.WriteMessage(websocket.BinaryMessage, message); err != <span class="literal">nil</span> &#123;</span><br><span class="line">                logs.Error(<span class="string">&quot;client[%s] write message err :%v&quot;</span>, c.Cid, err)</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> &lt;-c.pingTicker.C:</span><br><span class="line">            <span class="keyword">if</span> err := c.Conn.SetWriteDeadline(time.Now().Add(writeWait)); err != <span class="literal">nil</span> &#123;</span><br><span class="line">                logs.Error(<span class="string">&quot;client[%s] ping SetWriteDeadline err :%v&quot;</span>, c.Cid, err)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> err := c.Conn.WriteMessage(websocket.PingMessage, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">                logs.Error(<span class="string">&quot;client[%s] ping  err :%v&quot;</span>, c.Cid, err)</span><br><span class="line">                c.Close()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *WsConnection)</span></span> readMessage() &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        c.manager.removeClient(c)</span><br><span class="line">    &#125;()</span><br><span class="line">    c.Conn.SetReadLimit(maxMessageSize)</span><br><span class="line">    <span class="keyword">if</span> err := c.Conn.SetReadDeadline(time.Now().Add(pongWait)); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        logs.Error(<span class="string">&quot;SetReadDeadline err:%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        messageType, message, err := c.Conn.ReadMessage()</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//客户端发来的消息是二进制消息</span></span><br><span class="line">        <span class="keyword">if</span> messageType == websocket.BinaryMessage &#123;</span><br><span class="line">            <span class="keyword">if</span> c.ReadChan != <span class="literal">nil</span> &#123;</span><br><span class="line">                c.ReadChan &lt;- &amp;MsgPack&#123;</span><br><span class="line">                    Cid:  c.Cid,</span><br><span class="line">                    Body: message,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logs.Error(<span class="string">&quot;unsupported message type : %d&quot;</span>, messageType)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *WsConnection)</span></span> PongHandler(data <span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err := c.Conn.SetReadDeadline(time.Now().Add(pongWait)); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewWsConnection</span><span class="params">(conn *websocket.Conn, manager *Manager)</span></span> *WsConnection &#123;</span><br><span class="line">    cid := fmt.Sprintf(<span class="string">&quot;%s-%s-%d&quot;</span>, uuid.New().String(), manager.ServerId, atomic.AddUint64(&amp;cidBase, <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> &amp;WsConnection&#123;</span><br><span class="line">        Conn:      conn,</span><br><span class="line">        manager:   manager,</span><br><span class="line">        Cid:       cid,</span><br><span class="line">        WriteChan: <span class="built_in">make</span>(<span class="keyword">chan</span> []<span class="type">byte</span>, <span class="number">1024</span>),</span><br><span class="line">        ReadChan:  manager.ClientReadChan,</span><br><span class="line">        Session:   NewSession(cid),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>framework/net/ws_manager.go</p>
</blockquote>
<p>这个依赖就多了，主要是对<code>*websocket.Upgrader</code>和路由的处理</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> net</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;common/logs&quot;</span></span><br><span class="line">    <span class="string">&quot;common/utils&quot;</span></span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;errors&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;framework/game&quot;</span></span><br><span class="line">    <span class="string">&quot;framework/protocol&quot;</span></span><br><span class="line">    <span class="string">&quot;framework/remote&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/gorilla/websocket&quot;</span></span><br><span class="line">    <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    websocketUpgrade = websocket.Upgrader&#123;</span><br><span class="line">        CheckOrigin: <span class="function"><span class="keyword">func</span><span class="params">(r *http.Request)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        ReadBufferSize:  <span class="number">1024</span>,</span><br><span class="line">        WriteBufferSize: <span class="number">1024</span>,</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CheckOriginHandler <span class="function"><span class="keyword">func</span><span class="params">(r *http.Request)</span></span> <span class="type">bool</span></span><br><span class="line"><span class="keyword">type</span> Manager <span class="keyword">struct</span> &#123;</span><br><span class="line">    sync.RWMutex</span><br><span class="line">    websocketUpgrade   *websocket.Upgrader</span><br><span class="line">    ServerId           <span class="type">string</span></span><br><span class="line">    CheckOriginHandler CheckOriginHandler</span><br><span class="line">    clients            <span class="keyword">map</span>[<span class="type">string</span>]Connection</span><br><span class="line">    ClientReadChan     <span class="keyword">chan</span> *MsgPack</span><br><span class="line">    handlers           <span class="keyword">map</span>[protocol.PackageType]EventHandler</span><br><span class="line">    ConnectorHandlers  LogicHandler</span><br><span class="line">    RemoteReadChan     <span class="keyword">chan</span> []<span class="type">byte</span></span><br><span class="line">    RemoteCli          remote.Client</span><br><span class="line">    RemotePushChan     <span class="keyword">chan</span> *remote.Msg</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> HandlerFunc <span class="function"><span class="keyword">func</span><span class="params">(session *Session, body []<span class="type">byte</span>)</span></span> (any, <span class="type">error</span>)</span><br><span class="line"><span class="keyword">type</span> LogicHandler <span class="keyword">map</span>[<span class="type">string</span>]HandlerFunc</span><br><span class="line"><span class="keyword">type</span> EventHandler <span class="function"><span class="keyword">func</span><span class="params">(packet *protocol.Packet, c Connection)</span></span> <span class="type">error</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span></span> Run(addr <span class="type">string</span>) &#123;</span><br><span class="line">    <span class="keyword">go</span> m.clientReadChanHandler()</span><br><span class="line">    <span class="keyword">go</span> m.remoteReadChanHandler()</span><br><span class="line">    <span class="keyword">go</span> m.remotePushChanHandler()</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/&quot;</span>, m.serveWS)</span><br><span class="line">    <span class="comment">//设置不同的消息处理器</span></span><br><span class="line">    m.setupEventHandlers()</span><br><span class="line">    logs.Fatal(<span class="string">&quot;connector listen serve err:%v&quot;</span>, http.ListenAndServe(addr, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span></span> serveWS(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">    <span class="comment">//websocket 基于http</span></span><br><span class="line">    <span class="keyword">if</span> m.websocketUpgrade == <span class="literal">nil</span> &#123;</span><br><span class="line">        m.websocketUpgrade = &amp;websocketUpgrade</span><br><span class="line">    &#125;</span><br><span class="line">    wsConn, err := m.websocketUpgrade.Upgrade(w, r, <span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        logs.Error(<span class="string">&quot;websocketUpgrade.Upgrade err:%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    client := NewWsConnection(wsConn, m)</span><br><span class="line">    m.addClient(client)</span><br><span class="line">    client.Run()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span></span> addClient(client *WsConnection) &#123;</span><br><span class="line">    m.Lock()</span><br><span class="line">    <span class="keyword">defer</span> m.Unlock()</span><br><span class="line">    m.clients[client.Cid] = client</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span></span> removeClient(wc *WsConnection) &#123;</span><br><span class="line">    <span class="keyword">for</span> cid, c := <span class="keyword">range</span> m.clients &#123;</span><br><span class="line">        <span class="keyword">if</span> cid == wc.Cid &#123;</span><br><span class="line">            c.Close()</span><br><span class="line">            <span class="built_in">delete</span>(m.clients, cid)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span></span> clientReadChanHandler() &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> body, ok := &lt;-m.ClientReadChan:</span><br><span class="line">            <span class="keyword">if</span> ok &#123;</span><br><span class="line">                m.decodeClientPack(body)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span></span> decodeClientPack(body *MsgPack) &#123;</span><br><span class="line">    <span class="comment">//解析协议</span></span><br><span class="line">    <span class="comment">//logs.Info(&quot;receiver message:%v&quot;, string(body.Body))</span></span><br><span class="line">    packet, err := protocol.Decode(body.Body)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        logs.Error(<span class="string">&quot;decode message err:%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> err := m.routeEvent(packet, body.Cid); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        logs.Error(<span class="string">&quot;routeEvent err:%v&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span></span> Close() &#123;</span><br><span class="line">    <span class="keyword">for</span> cid, v := <span class="keyword">range</span> m.clients &#123;</span><br><span class="line">        v.Close()</span><br><span class="line">        <span class="built_in">delete</span>(m.clients, cid)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span></span> routeEvent(packet *protocol.Packet, cid <span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line">    <span class="comment">//根据packet.type来做不同的处理  处理器</span></span><br><span class="line">    conn, ok := m.clients[cid]</span><br><span class="line">    <span class="keyword">if</span> ok &#123;</span><br><span class="line">        handler, ok := m.handlers[packet.Type]</span><br><span class="line">        <span class="keyword">if</span> ok &#123;</span><br><span class="line">            <span class="keyword">return</span> handler(packet, conn)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> errors.New(<span class="string">&quot;no packetType found&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> errors.New(<span class="string">&quot;no client found&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span></span> setupEventHandlers() &#123;</span><br><span class="line">    m.handlers[protocol.Handshake] = m.HandshakeHandler</span><br><span class="line">    m.handlers[protocol.HandshakeAck] = m.HandshakeAckHandler</span><br><span class="line">    m.handlers[protocol.Heartbeat] = m.HeartbeatHandler</span><br><span class="line">    m.handlers[protocol.Data] = m.MessageHandler</span><br><span class="line">    m.handlers[protocol.Kick] = m.KickHandler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span></span> HandshakeHandler(packet *protocol.Packet, c Connection) <span class="type">error</span> &#123;</span><br><span class="line">    res := protocol.HandshakeResponse&#123;</span><br><span class="line">        Code: <span class="number">200</span>,</span><br><span class="line">        Sys: protocol.Sys&#123;</span><br><span class="line">            Heartbeat: <span class="number">3</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    data, _ := json.Marshal(res)</span><br><span class="line">    buf, err := protocol.Encode(packet.Type, data)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        logs.Error(<span class="string">&quot;encode packet err:%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c.SendMessage(buf)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span></span> HandshakeAckHandler(packet *protocol.Packet, c Connection) <span class="type">error</span> &#123;</span><br><span class="line">    logs.Info(<span class="string">&quot;receiver handshake ack message...&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span></span> HeartbeatHandler(packet *protocol.Packet, c Connection) <span class="type">error</span> &#123;</span><br><span class="line">    logs.Info(<span class="string">&quot;receiver heartbeat message:%v&quot;</span>, packet.Type)</span><br><span class="line">    <span class="keyword">var</span> res []<span class="type">byte</span></span><br><span class="line">    data, _ := json.Marshal(res)</span><br><span class="line">    buf, err := protocol.Encode(packet.Type, data)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        logs.Error(<span class="string">&quot;encode packet err:%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c.SendMessage(buf)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span></span> MessageHandler(packet *protocol.Packet, c Connection) <span class="type">error</span> &#123;</span><br><span class="line">    message := packet.MessageBody()</span><br><span class="line">    logs.Info(<span class="string">&quot;receiver message body, type=%v, router=%v, data:%v&quot;</span>,</span><br><span class="line">        message.Type, message.Route, <span class="type">string</span>(message.Data))</span><br><span class="line">    <span class="comment">//connector.entryHandler.entry</span></span><br><span class="line">    routeStr := message.Route</span><br><span class="line">    routers := strings.Split(routeStr, <span class="string">&quot;.&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(routers) != <span class="number">3</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> errors.New(<span class="string">&quot;router unsupported&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    serverType := routers[<span class="number">0</span>]</span><br><span class="line">    handlerMethod := fmt.Sprintf(<span class="string">&quot;%s.%s&quot;</span>, routers[<span class="number">1</span>], routers[<span class="number">2</span>])</span><br><span class="line">    connectorConfig := game.Conf.GetConnectorByServerType(serverType)</span><br><span class="line">    <span class="keyword">if</span> connectorConfig != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">//本地connector服务器处理</span></span><br><span class="line">        handler, ok := m.ConnectorHandlers[handlerMethod]</span><br><span class="line">        <span class="keyword">if</span> ok &#123;</span><br><span class="line">            data, err := handler(c.GetSession(), message.Data)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> err</span><br><span class="line">            &#125;</span><br><span class="line">            marshal, _ := json.Marshal(data)</span><br><span class="line">            message.Type = protocol.Response</span><br><span class="line">            message.Data = marshal</span><br><span class="line">            encode, err := protocol.MessageEncode(message)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> err</span><br><span class="line">            &#125;</span><br><span class="line">            res, err := protocol.Encode(packet.Type, encode)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> err</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c.SendMessage(res)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//nats 远端调用处理 hall.userHandler.updateUserAddress</span></span><br><span class="line">        dst, err := m.selectDst(serverType)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            logs.Error(<span class="string">&quot;remote send msg selectDst err:%v&quot;</span>, err)</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">        msg := &amp;remote.Msg&#123;</span><br><span class="line">            Cid:         c.GetSession().Cid,</span><br><span class="line">            Uid:         c.GetSession().Uid,</span><br><span class="line">            Src:         m.ServerId,</span><br><span class="line">            Dst:         dst,</span><br><span class="line">            Router:      handlerMethod,</span><br><span class="line">            Body:        message,</span><br><span class="line">            SessionData: c.GetSession().data,</span><br><span class="line">        &#125;</span><br><span class="line">        data, _ := json.Marshal(msg)</span><br><span class="line">        err = m.RemoteCli.SendMsg(dst, data)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            logs.Error(<span class="string">&quot;remote send msg err：%v&quot;</span>, err)</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span></span> KickHandler(packet *protocol.Packet, c Connection) <span class="type">error</span> &#123;</span><br><span class="line">    logs.Info(<span class="string">&quot;receiver kick  message...&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span></span> remoteReadChanHandler() &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> body, ok := &lt;-m.RemoteReadChan:</span><br><span class="line">            <span class="keyword">if</span> ok &#123;</span><br><span class="line">                logs.Info(<span class="string">&quot;sub nats msg:%v&quot;</span>, <span class="type">string</span>(body))</span><br><span class="line">                <span class="keyword">var</span> msg remote.Msg</span><br><span class="line">                <span class="keyword">if</span> err := json.Unmarshal(body, &amp;msg); err != <span class="literal">nil</span> &#123;</span><br><span class="line">                    logs.Error(<span class="string">&quot;nats remote message format err:%v&quot;</span>, err)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> msg.Type == remote.SessionType &#123;</span><br><span class="line">                    <span class="comment">//需要特出处理，session类型是存储在connection中的session 并不 推送客户端</span></span><br><span class="line">                    m.setSessionData(msg)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> msg.Body != <span class="literal">nil</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> msg.Body.Type == protocol.Request || msg.Body.Type == protocol.Response &#123;</span><br><span class="line">                        <span class="comment">//给客户端回信息 都是 response</span></span><br><span class="line">                        msg.Body.Type = protocol.Response</span><br><span class="line">                        m.Response(&amp;msg)</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> msg.Body.Type == protocol.Push &#123;</span><br><span class="line">                        m.RemotePushChan &lt;- &amp;msg</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span></span> selectDst(serverType <span class="type">string</span>) (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">    serversConfigs, ok := game.Conf.ServersConf.TypeServer[serverType]</span><br><span class="line">    <span class="keyword">if</span> !ok &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, errors.New(<span class="string">&quot;no server found&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//随机一个 比较好的一个策略</span></span><br><span class="line">    rand.New(rand.NewSource(time.Now().UnixNano()))</span><br><span class="line">    index := rand.Intn(<span class="built_in">len</span>(serversConfigs))</span><br><span class="line">    <span class="keyword">return</span> serversConfigs[index].ID, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span></span> Response(msg *remote.Msg) &#123;</span><br><span class="line">    connection, ok := m.clients[msg.Cid]</span><br><span class="line">    <span class="keyword">if</span> !ok &#123;</span><br><span class="line">        logs.Info(<span class="string">&quot;%s client down，uid=%s&quot;</span>, msg.Cid, msg.Uid)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    buf, err := protocol.MessageEncode(msg.Body)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        logs.Error(<span class="string">&quot;Response MessageEncode err:%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    res, err := protocol.Encode(protocol.Data, buf)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        logs.Error(<span class="string">&quot;Response Encode err:%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> msg.Body.Type == protocol.Push &#123;</span><br><span class="line">        <span class="keyword">for</span> _, v := <span class="keyword">range</span> m.clients &#123;</span><br><span class="line">            <span class="keyword">if</span> utils.Contains(msg.PushUser, v.GetSession().Uid) &#123;</span><br><span class="line">                v.SendMessage(res)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        connection.SendMessage(res)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span></span> remotePushChanHandler() &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> body, ok := &lt;-m.RemotePushChan:</span><br><span class="line">            <span class="keyword">if</span> ok &#123;</span><br><span class="line">                logs.Info(<span class="string">&quot;nats push message:%v&quot;</span>, body)</span><br><span class="line">                <span class="keyword">if</span> body.Body.Type == protocol.Push &#123;</span><br><span class="line">                    m.Response(body)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span></span> setSessionData(msg remote.Msg) &#123;</span><br><span class="line">    m.RLock()</span><br><span class="line">    <span class="keyword">defer</span> m.RUnlock()</span><br><span class="line">    connection, ok := m.clients[msg.Cid]</span><br><span class="line">    <span class="keyword">if</span> ok &#123;</span><br><span class="line">        connection.GetSession().SetData(msg.Uid, msg.SessionData)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewManager</span><span class="params">()</span></span> *Manager &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Manager&#123;</span><br><span class="line">        ClientReadChan: <span class="built_in">make</span>(<span class="keyword">chan</span> *MsgPack, <span class="number">1024</span>),</span><br><span class="line">        clients:        <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]Connection),</span><br><span class="line">        handlers:       <span class="built_in">make</span>(<span class="keyword">map</span>[protocol.PackageType]EventHandler),</span><br><span class="line">        RemoteReadChan: <span class="built_in">make</span>(<span class="keyword">chan</span> []<span class="type">byte</span>, <span class="number">1024</span>),</span><br><span class="line">        RemotePushChan: <span class="built_in">make</span>(<span class="keyword">chan</span> *remote.Msg, <span class="number">1024</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go棋牌游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>第10章 微服务的容错处理与负载均衡</title>
    <url>/2024/05/21/%E7%AC%AC10%E7%AB%A0-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%AE%B9%E9%94%99%E5%A4%84%E7%90%86%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    <content><![CDATA[<p>思考并回答以下问题：</p>
<span id="more"></span>
<p> 随着微服务的规模逐渐增长，各个微服务之间可能会存在错综复杂的调用关系；除此之外，整个微服务系统也可能对外部系统发起远程调用。鉴于网络的不可靠性和系统的运行意外，在微服务中发起的远程调用可能会得到失败的结果，比如网络连接缓慢或超时、提供服务方逻辑错误或者已经过载不可用等；同时为了应对更大的请求压力，各个微服务一般是多实例部署，如果各实例之间的负载不合理，就无法发挥服务器横向扩展的优势，提高系统的吞吐量。</p>
<p>在请求失败后，健壮性服务一般会采用重试机制来发起请求，对于大多数的暂时性故障，比如网络短时停顿等，重试机制都能够得到良好的调用结果。但是对于一些长时间不可用的微服务持续性远程调用，重试机制可能会使得情况变得更加不堪，对此我们就需要服务熔断的机制，为微服务之间的调用提供强大的容错能力，保护服务调用方的服务稳定性。而对于多实例部署的微服务体系，我们需要使用合理的负载均衡策略，将请求合理地分配到各个服务实例中，保证集群中大多数服务器的负载保持在高效稳定的状态，提高系统的处理能力。</p>
<p>在本章中，我们首先介绍服务熔断和负载均衡的相关原理，然后实现自定义的负载均衡器和借助Hystrix实现服务熔断器，并将它们应用到use-string-service服务对string-service服务的远程调用中，最后对Hystrix进行详解和实践在服务网关中添加服务熔断与负载均衡功能。</p>
<h1 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a><span style="color:#339AFF;">服务熔断</span></h1><p>熔断的概念最先来自于电路工程中，在我们的家庭电路中，在电表和电路的火线上会接有一根保险丝为电路安全护航。保险丝一般由熔点较低的金属制成，当电路上的电流过大时，它就会因为过热被熔断，从而达到保护电表和电路的作用。</p>
<p>在微服务架构中，服务之间的调用一般分为服务调用方和服务提供方。当下游服务因为过载或者故障不能用时，我们需要及时在上游的服务调用方暂时“熔断”调用方和提供方之间的调用链，避免服务雪崩现象的出现，从而保证服务调用方与系统整体的稳定性和可用性。</p>
<h2 id="分布式系统中的服务雪崩"><a href="#分布式系统中的服务雪崩" class="headerlink" title="分布式系统中的服务雪崩"></a><span style="color:#00ACC1;">分布式系统中的服务雪崩</span></h2><p>在分布式系统中，由于业务上的划分，一次完整的请求可能需要不同服务协作完成，在微服务架构中就是多个服务实例协作完成。请求会在这些服务实例中传递，服务之间的调用会产生新的请求，它们共同组成一条服务调用链，关系如下（图10-1）时序图所示。</p>
<blockquote>
<p>图10-1 微服务调用链</p>
</blockquote>
<img src="/2024/05/21/%E7%AC%AC10%E7%AB%A0-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%AE%B9%E9%94%99%E5%A4%84%E7%90%86%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/1.png" class="">
<p>客户端发起了一次请求Request1，网关在接受到请求后将它转发给service-A，由于这次请求涉及到了service-B中的数据，所以service-A又向service-B发起了一次请求Request1-1来获取对应的数据，在处理结束后将结果返回给网关，由网关将结果返回给客户端。上图10-1中Request1和Request1-1共同组成了这次调用的调用链。</p>
<p>服务雪崩是指当调用链的某个环节（特别是服务提供方的服务）不可用时，导致了上游环节不可用，并最终将这种影响像雪崩一样扩大到整个系统中，导致了整个系统不可用的情况。</p>
<p>服务雪崩的发生流程如下图10-2所示。</p>
<blockquote>
<p>图10-2 服务雪崩的发生流程</p>
</blockquote>
<img src="/2024/05/21/%E7%AC%AC10%E7%AB%A0-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%AE%B9%E9%94%99%E5%A4%84%E7%90%86%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/2.png" class="">
<p>服务雪崩一般有3个阶段：</p>
<p>（1）第一阶段是服务提供者不能用。</p>
<p>在初始阶段，一切运行良好，网关、service-A和service-B响应着客户端的各种请求。在某一个时间节点，服务提供者service-B由于网络故障或者请求过载而不可用，无法及时响应各类请求。</p>
<p>（2）第二阶段是服务调用者不可用。</p>
<p>在服务提供者不可用之后，客户端可能会因为错误提示或者长时间的阻塞而不断发送相同的请求到网关中，网关再次将请求转发给service-A进行处理，service-A根据业务流程也会向service-B发起数据请求；同时上一阶段中service-A对service-B超时或者失败的请求可能会因为service-A中重试机制再次请求service-B。这些请求都无法从service-B中获取到有效的返回，最坏的结果是都被阻塞，无法及时响应。service-A也会因为发起了过多对service-B的请求而产生的等待线程耗尽了线程池中的资源，无法及时响应其他请求，导致了自身的不可用。</p>
<p>（3）最后阶段是整个系统的不可用。</p>
<p>service-A中等待请求同样阻塞了转发请求的网关。网关也因为大量等待请求将会产生大量的阻塞线程，使得网关没有足够的资源处理其他请求，导致了整个系统无法对外提供服务。</p>
<h2 id="服务熔断保障系统可用性"><a href="#服务熔断保障系统可用性" class="headerlink" title="服务熔断保障系统可用性"></a><span style="color:#00ACC1;">服务熔断保障系统可用性</span></h2><p>为了避免服务雪崩现象的出现，我们需要及时“壮士断腕”，在必要的时候暂时切断对异常服务提供者的调用，保证部分服务的可用以及整体系统的稳定性。服务熔断机制如图10-3所示。</p>
<blockquote>
<p>图10-3 服务熔断机制</p>
</blockquote>
<img src="/2024/05/21/%E7%AC%AC10%E7%AB%A0-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%AE%B9%E9%94%99%E5%A4%84%E7%90%86%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/3.png" class="">
<p>如图10-3，我们在service-A向service-B的请求中增加了一根“保险丝”，即断路器。它会<span style="color:red">统计</span>一段时间内service-A对service-B请求响应结果，在超时或者失败次数过多的情况下，阻断service-A对service-B的请求，直接返回相关的<span style="color:red">异常</span>处理结果，使得service-A中的请求线程能够及时返回，避免资源耗尽而不可用，从而保护了服务调用者，避免了服务级联失败。</p>
<h2 id="断路器"><a href="#断路器" class="headerlink" title="断路器"></a><span style="color:#00ACC1;">断路器</span></h2><p>断路器能够很好地保护服务调用方的稳定性，它能够避免服务调用者频繁执行可能失败的服务提供者，防止服务调用者浪费CPU使用周期和线程资源。</p>
<p>断路器设计模式借鉴了电路中的保险丝设计方案。<span style="color:red">断路器代理了服务调用方对提供方的请求，它监控了最近请求的失败和超时次数。</span>在下游服务因为过载或者故障无法提供正常响应时，断路器中的请求失败率就会大大提升，在超过一定阀值之后，断路器会打开，切断服务调用者和服务提供者之间的联系，此时服务调用者会执行失败逻辑或者返回异常，避免无效的线程等待。同时断路器中还提供<span style="color:red">检测恢复</span>机制，允许服务调用者尝试调用服务提供者以检测其是否恢复正常，若正常则关闭断路器，恢复正常调用。</p>
<p>断路器中存在三种状态，分别是关闭、打开、半开，它们之间的状态转化如图10-4所示。</p>
<blockquote>
<p>图10-4 断路器状态转化</p>
</blockquote>
<img src="/2024/05/21/%E7%AC%AC10%E7%AB%A0-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%AE%B9%E9%94%99%E5%A4%84%E7%90%86%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/4.png" class="">
<ul>
<li>关闭状态：如果程序正常运行，那么断路器大多数时候都处于这个状态，此时服务调用者正常调用服务提供者。断路器会统计周期时间内的请求总次数和失败次数的比例。</li>
<li>打开状态：如果最近失败频率超过预设的阀值之后，断路器就会进入打开的状态。服务调用者对服务提供者的调用将会立即失败，转而执行预设的失败逻辑或者返回异常。</li>
<li>半开状态：断路器进入打开状态之后将启动一个超时定时器，在定时器到达时，它会进入到半开状态。此时断路器允许服务调用者尝试对服务提供者发起少量实际调用请求（检测恢复机制）。如果这些请求都成功执行，那么断路器就认为服务提供者已经恢复正常，进入关闭状态，失败计数器也同时复位。如果这些请求失败，断路器将返回到打开状态，并重新启动超时定数器，重复进行检测恢复。</li>
</ul>
<p><span style="color:red">关闭状态使用的失败计数器基于时间窗口计数，它会定期自动复位。</span>只有在窗口时间内发生的请求总次数和请求失败次数达到一定的阀值，断路器才会被打开。半打开状态使用成功计数器记录调用操作的成功尝试次数，在指定数量的连续操作调用成功后，断路器恢复到关闭状态。如果任何调用失败，断路器会立即进入断开状态，成功计数器将在下次进入半开状态时重新清零。半开状态仅允许有限的请求发生真正的调用，这有助于防止刚恢复的服务提供者突然被请求淹没而再次宕机。</p>
<h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a><span style="color:#339AFF;">负载均衡</span></h1><p>负载均衡能够将大量的请求，根据负载均衡算法，分发到多台服务器上进行处理，使得所有服务器负载都维持在高效稳定的状态，以提高系统的吞吐量，保证可用性。</p>
<h2 id="负载均衡类型"><a href="#负载均衡类型" class="headerlink" title="负载均衡类型"></a><span style="color:#00ACC1;">负载均衡类型</span></h2><p>负载均衡分为软件负载均衡和硬件负载均衡。软件负载均衡一般使用独立的负载均衡软件来实现请求的分发，它配置简单，使用成本低，能够满足基本的负载均衡要求，但是负载均衡软件的质量和所部署服务器的性能就有可能成为系统吞吐量的瓶颈；硬件负载均衡依赖于特殊的负载均衡设备，部署成本高，但相对于软件负载均衡，能够满足更多样化的需求。</p>
<p>基于DNS负载均衡和反向代理负载均衡是我们常见的软件负载均衡。<span style="color:red">在DNS服务器中，会为同一个名称配置多个不同的IP地址，不同的DNS请求会解析到不同的IP地址</span>，从而达到不同请求访问不同服务器的目的；而反向代理负载均衡使用代理服务器，将请求按照一定的规则分发到下游的服务器集群进行处理，最常见的方式即服务网关。</p>
<h2 id="负载均衡算法"><a href="#负载均衡算法" class="headerlink" title="负载均衡算法"></a><span style="color:#00ACC1;">负载均衡算法</span></h2><p>负载均衡算法定义了如何将请求分散到服务实例的规则，优秀的负载均衡算法能够有效提高系统的吞吐量，使服务集群中各服务的负载处于高效稳定的状态。常见的负载均衡算法有以下几种：</p>
<p>（1）随机法</p>
<p>随机从服务集群中选取一台服务分配请求。随机法实现简单明了，保证了请求的分散性，但是无法顾及请求分配是否合理和服务器的负载能力。</p>
<p>（2）轮询法或者加权轮询法</p>
<p>将请求轮流分配给现有服务集群中的每一台服务，适用于服务集群中各服务负载能力相当且请求处理差异不大的情况下。加权轮询会根据各服务的权重，额外分配更多的请求，例如服务A权重1，服务器B权重2，服务器C权重3，则分配的过程为A-B-B-C-C-C-A-B-B-C-C-C······</p>
<p>（3）Hash法或者一致性Hash法</p>
<p>使用Hash算法将请求分散到各个服务中。一致性Hash则基于虚拟节点，在某一个服务节点宕机后将请求平摊到其他服务节点，避免请求的剧烈变动。</p>
<p>（4）最小连接数法</p>
<p>将请求分配到当前服务集群中处理请求最少的服务中。<span style="color:red">该算法需要负载均衡服务器和服务之间存在信息交互，负载均衡服务器需要了解集群中各个服务的负载情况。</span></p>
<h1 id="实践案例：服务熔断和负载均衡使用"><a href="#实践案例：服务熔断和负载均衡使用" class="headerlink" title="实践案例：服务熔断和负载均衡使用"></a><span style="color:#339AFF;">实践案例：服务熔断和负载均衡使用</span></h1><p>Hystrix是Netflix开源的一款优秀的服务间断路器，它能够在服务提供者出现故障时，隔离调用者和提供者，防止服务级联失败；同时提供失败回滚逻辑，使系统快速从异常中恢复。Hystrix完美地实现了断路器模式，同时还提供信号量和线程隔离的方式以保护服务调用者的线程资源，它对延迟和失败提供了强大的容错能力，为系统提供保护和控制。接下来我们将通过一个简单的实例项目来了解hystrix-go的使用方式。本例子的完整代码位于ch10-resiliency文件夹下。</p>
<p>这个实例中，我们使用两个简单的Web项目string-service和use-string-service来演示在服务调用中如何使用服务熔断和负载均衡。项目结构按照Go-kit的transport-endpoint-service的方式进行组织。其中string-service是我们基本的演示项目，use-string-service将通过HTTP的方式调用string-service提供的字符串操作服务，并在调用的过程中使用Hystrix进行访问保护和负载均衡器进行调用分发。项目的调用逻辑图如下图10-5所示。</p>
<blockquote>
<p>图10-5 调用逻辑图</p>
</blockquote>
<img src="/2024/05/21/%E7%AC%AC10%E7%AB%A0-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%AE%B9%E9%94%99%E5%A4%84%E7%90%86%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/5.png" class="">
<h2 id="负载均衡器"><a href="#负载均衡器" class="headerlink" title="负载均衡器"></a><span style="color:#00ACC1;">负载均衡器</span></h2><p>在进行项目编写之前，我们首先在common/loadbalance包下定义一个负载均衡算法的接口方法，它接收一组服务实例列表，然后根据具体的负载均衡算法选择特定的被调用服务实例信息返回。源码位于common/loadbalance/loadbalance.go下，代码如下所示：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 负载均衡器</span></span><br><span class="line"><span class="keyword">type</span> LoadBalance <span class="keyword">interface</span> &#123;</span><br><span class="line">    SelectService(service []*api.AgentService) (*api.AgentService, <span class="type">error</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>为了接下来的代码演示，我们还实现了一个随机法的负载均衡器RandomLoadBalance，代码如下所示：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ErrNoInstances = errors.New(<span class="string">&quot;service instances are not existed&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> RandomLoadBalance <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机负载均衡</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(loadBalance *RandomLoadBalance)</span></span> SelectService(services []*api.AgentService) (*api.AgentService, <span class="type">error</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> services == <span class="literal">nil</span> || <span class="built_in">len</span>(services) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, ErrNoInstances</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> services[rand.Intn(<span class="built_in">len</span>(services))], <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="服务编写"><a href="#服务编写" class="headerlink" title="服务编写"></a><span style="color:#00ACC1;">服务编写</span></h2><p>string-service服务即我们的基本演示项目，代码位于ch10-resiliency/string-service中，我们在6.6小节中已经详细介绍过该项目的搭建。string-service服务将对外提供两个HTTP接口：<code>/health</code>接口用于进行健康检查；<code>/op/&#123;type&#125;/&#123;a&#125;/&#123;b&#125;</code>接口对外提供字符串操作。</p>
<p>use-string-service服务作为服务调用方，会通过HTTP的方式调用string-service服务提供的<code>/op/&#123;type&#125;/&#123;a&#125;/&#123;b&#125;</code>接口。use-string-service服务使用Go-kit的项目结构进行组织，详细代码请求参阅ch10-resiliency/use-string-service目录。接下来我们将按照service层，endpoint层，transport层的顺序依次讲解use-string-service服务的构建。</p>
<p>1，use-string-service的service层</p>
<p>在use-string-service的service层中，我们定义了以下两个接口方法，源码位于ch10-resiliency/use-string-service/service/service.go，代码如下所示：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> service</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;errors&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/afex/hystrix-go/hystrix&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/hashicorp/consul/api&quot;</span></span><br><span class="line">    <span class="string">&quot;micro-go-book/ch10-resiliency/use-string-service/config&quot;</span></span><br><span class="line">    <span class="string">&quot;micro-go-book/common/discover&quot;</span></span><br><span class="line">    <span class="string">&quot;micro-go-book/common/loadbalance&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;net/url&quot;</span></span><br><span class="line">    <span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    StringServiceCommandName = <span class="string">&quot;String.string&quot;</span></span><br><span class="line">    StringService            = <span class="string">&quot;string&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    ErrHystrixFallbackExecute = errors.New(<span class="string">&quot;Hystrixfall back execute&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Service Define a service interface</span></span><br><span class="line"><span class="keyword">type</span> Service <span class="keyword">interface</span> &#123;</span><br><span class="line">    <span class="comment">// 远程调用 string-service 服务</span></span><br><span class="line">    UseStringService(operationType, a, b <span class="type">string</span>) (<span class="type">string</span>, <span class="type">error</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 健康检查</span></span><br><span class="line">    HealthCheck() <span class="type">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ArithmeticService implement Service interface</span></span><br><span class="line"><span class="keyword">type</span> UseStringService <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// 服务发现客户端</span></span><br><span class="line">    discoveryClient discover.DiscoveryClient <span class="comment">// 如何拿到服务的地址？</span></span><br><span class="line">    loadbalance     loadbalance.LoadBalance <span class="comment">// 多实例使用哪一个？怎么决定？</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewUseStringService</span><span class="params">(client discover.DiscoveryClient, lb loadbalance.LoadBalance)</span></span> Service &#123;</span><br><span class="line"></span><br><span class="line">    hystrix.ConfigureCommand(StringServiceCommandName, hystrix.CommandConfig&#123;</span><br><span class="line">        <span class="comment">// 设置触发最低请求阀值为 5，方便我们观察结果</span></span><br><span class="line">        RequestVolumeThreshold: <span class="number">5</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> &amp;UseStringService&#123;</span><br><span class="line">        discoveryClient: client,</span><br><span class="line">        loadbalance:     lb,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// StringResponse define response struct</span></span><br><span class="line"><span class="keyword">type</span> StringResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">    Result <span class="type">string</span> <span class="string">`json:&quot;result&quot;`</span></span><br><span class="line">    Error  <span class="type">error</span>  <span class="string">`json:&quot;error&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s UseStringService)</span></span> UseStringService(operationType, a, b <span class="type">string</span>) (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> operationResult <span class="type">string</span></span><br><span class="line"></span><br><span class="line">    err := hystrix.Do(StringServiceCommandName, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line">        instances := s.discoveryClient.DiscoverServices(StringService, config.Logger)</span><br><span class="line">        <span class="comment">// 随机选取一个服务实例进行计算</span></span><br><span class="line">        instanceList := <span class="built_in">make</span>([]*api.AgentService, <span class="built_in">len</span>(instances))</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(instances); i++ &#123;</span><br><span class="line">            instanceList[i] = instances[i].(*api.AgentService)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 使用负载均衡算法选取实例</span></span><br><span class="line">        selectInstance, err := s.loadbalance.SelectService(instanceList)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            config.Logger.Println(err.Error())</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">        config.Logger.Printf(<span class="string">&quot;current string-service ID is %s and address:port is %s:%s\n&quot;</span>, selectInstance.ID, selectInstance.Address, strconv.Itoa(selectInstance.Port))</span><br><span class="line">        requestUrl := url.URL&#123;</span><br><span class="line">            Scheme: <span class="string">&quot;http&quot;</span>,</span><br><span class="line">            Host:   selectInstance.Address + <span class="string">&quot;:&quot;</span> + strconv.Itoa(selectInstance.Port),</span><br><span class="line">            Path:   <span class="string">&quot;/op/&quot;</span> + operationType + <span class="string">&quot;/&quot;</span> + a + <span class="string">&quot;/&quot;</span> + b,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        resp, err := http.Post(requestUrl.String(), <span class="string">&quot;&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">        result := &amp;StringResponse&#123;&#125;</span><br><span class="line"></span><br><span class="line">        err = json.NewDecoder(resp.Body).Decode(result)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> result.Error != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> result.Error</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        operationResult = result.Result</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">    &#125;, <span class="function"><span class="keyword">func</span><span class="params">(e <span class="type">error</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ErrHystrixFallbackExecute</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> operationResult, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HealthCheck implement Service method</span></span><br><span class="line"><span class="comment">// 用于检查服务的健康状态，这里仅仅返回true。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s UseStringService)</span></span> HealthCheck() <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>上述代码中，在UseStringService方法中封装了对string-service服务的HTTP调用。同时为了提供服务熔断能力，在对string-service进行HTTP调用时，我们使用了Hystrix对调用过程进行包装。对此，需要引入hystrix-go的相关依赖<code>https://github.com/afex/hystrix-go</code>。可以看到我们将服务发现和HTTP调用过程通过<code>hystrix.Do</code>函数包装为一个Hystrix命令来执行，<code>hystrix.Do</code>是一种同步命令调用方式，我们的调用结果将会同步返回。 除此之外，Hystrix还提供异步调用方式。</p>
<p>对于每一种Hystrix命令，我们都需要为它们赋予不同的名称，标明它们是属于不同的远程调用，<span style="color:red">命令相同的Hystrix命令将会使用相同的断路器进行熔断保护</span>，在上述代码中，我们将该Hystrix命令命名为<code>String.string</code>，该名称下的Hystrix命令都会使用相同的断路器进行熔断保护和数据统计。</p>
<p>在<code>hystrix.Do</code>包装方法中，我们首先通过“string”服务名从Consul中获取其服务实例列表；接着我们使用负载均衡器从服务实例列表选取一个合适的服务实例进行调用；最后服务调用结束后返回调用结果，如果调用过程中发生异常，则返回异常。</p>
<p><code>hystrix.Do</code>还可以在最后对异常进行处理，对此需要定义一个失败回滚函数，可以使用它在服务调用失败时进行异常处理和回滚操作，如果不定义就直接返回异常。在上面的例子中，我们定义了一个简单的失败回滚函数，返回了特定的异常信息。注意，如果该名称的Hystrix断路器已经打开，那么<code>hystrix.Do</code>将<span style="color:red">直接执行失败回滚函数，跳过远程调用过程，进行服务熔断操作</span>。</p>
<p>2，use-string-service的endpoint层</p>
<p>在endpoint层中，我们需要创建UseStringEndpoint将UseStringService方法提供出去，源码位于ch10-resiliency/use-string-service/endpoint/endpoints.go，代码如下所示：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> endpoint</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;context&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/go-kit/kit/endpoint&quot;</span></span><br><span class="line">    <span class="string">&quot;micro-go-book/ch10-resiliency/use-string-service/service&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// CalculateEndpoint define endpoint</span></span><br><span class="line"><span class="keyword">type</span> UseStringEndpoints <span class="keyword">struct</span> &#123;</span><br><span class="line">    UseStringEndpoint   endpoint.Endpoint</span><br><span class="line">    HealthCheckEndpoint endpoint.Endpoint</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// StringRequest define request struct</span></span><br><span class="line"><span class="keyword">type</span> UseStringRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">    RequestType <span class="type">string</span> <span class="string">`json:&quot;request_type&quot;`</span></span><br><span class="line">    A           <span class="type">string</span> <span class="string">`json:&quot;a&quot;`</span></span><br><span class="line">    B           <span class="type">string</span> <span class="string">`json:&quot;b&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// StringResponse define response struct</span></span><br><span class="line"><span class="keyword">type</span> UseStringResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">    Result <span class="type">string</span> <span class="string">`json:&quot;result&quot;`</span></span><br><span class="line">    Error  <span class="type">string</span>  <span class="string">`json:&quot;error&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MakeStringEndpoint make endpoint</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MakeUseStringEndpoint</span><span class="params">(svc service.Service)</span></span> endpoint.Endpoint &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context, request <span class="keyword">interface</span>&#123;&#125;)</span></span> (response <span class="keyword">interface</span>&#123;&#125;, err <span class="type">error</span>) &#123;</span><br><span class="line">        req := request.(UseStringRequest)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> (</span><br><span class="line">            res, a, b, opErrorString <span class="type">string</span></span><br><span class="line">            opError   <span class="type">error</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        a = req.A</span><br><span class="line">        b = req.B</span><br><span class="line"></span><br><span class="line">        res, opError = svc.UseStringService(req.RequestType, a, b)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> opError != <span class="literal">nil</span>&#123;</span><br><span class="line">            opErrorString = opError.Error()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> UseStringResponse&#123;Result: res, Error: opErrorString&#125;, <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HealthRequest 健康检查请求结构</span></span><br><span class="line"><span class="keyword">type</span> HealthRequest <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HealthResponse 健康检查响应结构</span></span><br><span class="line"><span class="keyword">type</span> HealthResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">    Status <span class="type">bool</span> <span class="string">`json:&quot;status&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MakeHealthCheckEndpoint 创建健康检查Endpoint</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MakeHealthCheckEndpoint</span><span class="params">(svc service.Service)</span></span> endpoint.Endpoint &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context, request <span class="keyword">interface</span>&#123;&#125;)</span></span> (response <span class="keyword">interface</span>&#123;&#125;, err <span class="type">error</span>) &#123;</span><br><span class="line">        status := svc.HealthCheck()</span><br><span class="line">        <span class="keyword">return</span> HealthResponse&#123;status&#125;, <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在上述代码中，我们使用MakeUseStringEndpoint方法构建了UseStringEndpoint，将<code>UseStringService.UseStringService</code>方法暴露了出去，以供transport层调用。</p>
<p>3，use-string-service的transport层</p>
<p>在transport层中，我们需要将UseStringEndpoint部署在use-string-service服务的<code>/op/&#123;type&#125;/&#123;a&#125;/&#123;b&#125;</code>路径下，这样子我们在调用use-string-service服务的<code>/op/&#123;type&#125;/&#123;a&#125;/&#123;b&#125;</code>接口时会把请求转发给string-service服务进行处理，以验证负载均衡和服务熔断的效果。源码位于ch10-resiliency/use-string-service/transport/http.go下，代码如下所示：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> transport</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;context&quot;</span></span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;errors&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/afex/hystrix-go/hystrix&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/go-kit/kit/log&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/go-kit/kit/transport&quot;</span></span><br><span class="line">    kithttp <span class="string">&quot;github.com/go-kit/kit/transport/http&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/gorilla/mux&quot;</span></span><br><span class="line">    <span class="string">&quot;micro-go-book/ch10-resiliency/use-string-service/endpoint&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/prometheus/client_golang/prometheus/promhttp&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    ErrorBadRequest = errors.New(<span class="string">&quot;invalid request parameter&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// MakeHttpHandler make http handler use mux</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MakeHttpHandler</span><span class="params">(ctx context.Context, endpoints endpoint.UseStringEndpoints, logger log.Logger)</span></span> http.Handler &#123;</span><br><span class="line">    r := mux.NewRouter()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    options := []kithttp.ServerOption&#123;</span><br><span class="line">        kithttp.ServerErrorHandler(transport.NewLogErrorHandler(logger)),</span><br><span class="line">        kithttp.ServerErrorEncoder(encodeError),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r.Methods(<span class="string">&quot;POST&quot;</span>).Path(<span class="string">&quot;/op/&#123;type&#125;/&#123;a&#125;/&#123;b&#125;&quot;</span>).Handler(kithttp.NewServer(</span><br><span class="line">        endpoints.UseStringEndpoint,</span><br><span class="line">        decodeStringRequest,</span><br><span class="line">        encodeStringResponse,</span><br><span class="line">        options...,</span><br><span class="line">    ))</span><br><span class="line"></span><br><span class="line">    r.Path(<span class="string">&quot;/metrics&quot;</span>).Handler(promhttp.Handler())</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create health check handler</span></span><br><span class="line">    r.Methods(<span class="string">&quot;GET&quot;</span>).Path(<span class="string">&quot;/health&quot;</span>).Handler(kithttp.NewServer(</span><br><span class="line">        endpoints.HealthCheckEndpoint,</span><br><span class="line">        decodeHealthCheckRequest,</span><br><span class="line">        encodeStringResponse,</span><br><span class="line">        options...,</span><br><span class="line">    ))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加 hytrix 监控数据</span></span><br><span class="line">    hystrixStreamHandler := hystrix.NewStreamHandler()</span><br><span class="line">    hystrixStreamHandler.Start()</span><br><span class="line">    r.Handle(<span class="string">&quot;/hystrix/stream&quot;</span>, hystrixStreamHandler)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// decodeStringRequest decode request params to struct</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">decodeStringRequest</span><span class="params">(_ context.Context, r *http.Request)</span></span> (<span class="keyword">interface</span>&#123;&#125;, <span class="type">error</span>) &#123;</span><br><span class="line">    vars := mux.Vars(r)</span><br><span class="line">    requestType, ok := vars[<span class="string">&quot;type&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> !ok &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, ErrorBadRequest</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pa, ok := vars[<span class="string">&quot;a&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> !ok &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, ErrorBadRequest</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pb, ok := vars[<span class="string">&quot;b&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> !ok &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, ErrorBadRequest</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> endpoint.UseStringRequest&#123;</span><br><span class="line">        RequestType: requestType,</span><br><span class="line">        A:           pa,</span><br><span class="line">        B:           pb,</span><br><span class="line">    &#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// encodeStringResponse encode response to return</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">encodeStringResponse</span><span class="params">(ctx context.Context, w http.ResponseWriter, response <span class="keyword">interface</span>&#123;&#125;)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    w.Header().Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json;charset=utf-8&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> json.NewEncoder(w).Encode(response)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// decodeHealthCheckRequest decode request</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">decodeHealthCheckRequest</span><span class="params">(ctx context.Context, r *http.Request)</span></span> (<span class="keyword">interface</span>&#123;&#125;, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> endpoint.HealthRequest&#123;&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">encodeError</span><span class="params">(_ context.Context, err <span class="type">error</span>, w http.ResponseWriter)</span></span> &#123;</span><br><span class="line">    w.Header().Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json; charset=utf-8&quot;</span>)</span><br><span class="line">    <span class="keyword">switch</span> err &#123;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        w.WriteHeader(http.StatusInternalServerError)</span><br><span class="line">    &#125;</span><br><span class="line">    json.NewEncoder(w).Encode(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">        <span class="string">&quot;error&quot;</span>: err.Error(),</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在上述代码中，我们将UseStringEndpoint部署在use-string-service服务的<code>/op/&#123;type&#125;/&#123;a&#125;/&#123;b&#125;</code>路径下。接着我们使用decodeStringRequest方法将HTTP请求参数转化为<code>endpoint.UseStringRequest</code>传递给UseStringEndpoint，并使用encodeStringResponse将UseStringEndpoint返回的结果转化为JSON数据返回给调用客户端。</p>
<p>use-string-service的main函数将完成服务注册并依次构建service层、endpoint层、transport层，然后将transport的HTTP服务部署在配置的端口下，具体实现参考文件ch10-resiliency/use-string-service/main.go：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;context&quot;</span></span><br><span class="line">    <span class="string">&quot;flag&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/go-kit/kit/circuitbreaker&quot;</span></span><br><span class="line">    uuid <span class="string">&quot;github.com/satori/go.uuid&quot;</span></span><br><span class="line">    <span class="string">&quot;micro-go-book/ch10-resiliency/use-string-service/config&quot;</span></span><br><span class="line">    <span class="string">&quot;micro-go-book/ch10-resiliency/use-string-service/endpoint&quot;</span></span><br><span class="line">    <span class="string">&quot;micro-go-book/ch10-resiliency/use-string-service/service&quot;</span></span><br><span class="line">    <span class="string">&quot;micro-go-book/ch10-resiliency/use-string-service/transport&quot;</span></span><br><span class="line">    <span class="string">&quot;micro-go-book/common/discover&quot;</span></span><br><span class="line">    <span class="string">&quot;micro-go-book/common/loadbalance&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;os/signal&quot;</span></span><br><span class="line">    <span class="string">&quot;strconv&quot;</span></span><br><span class="line">    <span class="string">&quot;syscall&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> (</span><br><span class="line">        servicePort = flag.Int(<span class="string">&quot;service.port&quot;</span>, <span class="number">10086</span>, <span class="string">&quot;service port&quot;</span>)</span><br><span class="line">        serviceHost = flag.String(<span class="string">&quot;service.host&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;service host&quot;</span>)</span><br><span class="line">        consulPort  = flag.Int(<span class="string">&quot;consul.port&quot;</span>, <span class="number">8500</span>, <span class="string">&quot;consul port&quot;</span>)</span><br><span class="line">        consulHost  = flag.String(<span class="string">&quot;consul.host&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;consul host&quot;</span>)</span><br><span class="line">        serviceName = flag.String(<span class="string">&quot;service.name&quot;</span>, <span class="string">&quot;use-string&quot;</span>, <span class="string">&quot;service name&quot;</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    flag.Parse()</span><br><span class="line"></span><br><span class="line">    ctx := context.Background()</span><br><span class="line">    errChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">error</span>)</span><br><span class="line">    <span class="keyword">var</span> discoveryClient discover.DiscoveryClient</span><br><span class="line">    discoveryClient, err := discover.NewKitDiscoverClient(*consulHost, *consulPort)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        config.Logger.Println(<span class="string">&quot;Get Consul Client failed&quot;</span>)</span><br><span class="line">        os.Exit(<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> svc service.Service</span><br><span class="line">    svc = service.NewUseStringService(discoveryClient, &amp;loadbalance.RandomLoadBalance&#123;&#125;)</span><br><span class="line">    useStringEndpoint := endpoint.MakeUseStringEndpoint(svc)</span><br><span class="line">    useStringEndpoint = circuitbreaker.Hystrix(service.StringServiceCommandName)(useStringEndpoint)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建健康检查的Endpoint</span></span><br><span class="line">    healthEndpoint := endpoint.MakeHealthCheckEndpoint(svc)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把算术运算Endpoint和健康检查Endpoint封装至StringEndpoints</span></span><br><span class="line">    endpts := endpoint.UseStringEndpoints&#123;</span><br><span class="line">        UseStringEndpoint:   useStringEndpoint,</span><br><span class="line">        HealthCheckEndpoint: healthEndpoint,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建http.Handler</span></span><br><span class="line">    r := transport.MakeHttpHandler(ctx, endpts, config.KitLogger)</span><br><span class="line"></span><br><span class="line">    instanceId := *serviceName + <span class="string">&quot;-&quot;</span> + uuid.NewV4().String()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//http server</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">        config.Logger.Println(<span class="string">&quot;Http Server start at port:&quot;</span> + strconv.Itoa(*servicePort))</span><br><span class="line">        <span class="comment">//启动前执行注册</span></span><br><span class="line">        <span class="keyword">if</span> !discoveryClient.Register(*serviceName, instanceId, <span class="string">&quot;/health&quot;</span>, *serviceHost, *servicePort, <span class="literal">nil</span>, config.Logger) &#123;</span><br><span class="line">            config.Logger.Printf(<span class="string">&quot;use-string-service for service %s failed.&quot;</span>, serviceName)</span><br><span class="line">            <span class="comment">// 注册失败，服务启动失败</span></span><br><span class="line">            os.Exit(<span class="number">-1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        handler := r</span><br><span class="line">        errChan &lt;- http.ListenAndServe(<span class="string">&quot;:&quot;</span>+strconv.Itoa(*servicePort), handler)</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        c := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</span><br><span class="line">        signal.Notify(c, syscall.SIGINT, syscall.SIGTERM)</span><br><span class="line">        errChan &lt;- fmt.Errorf(<span class="string">&quot;%s&quot;</span>, &lt;-c)</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="type">error</span> := &lt;-errChan</span><br><span class="line">    <span class="comment">//服务退出取消注册</span></span><br><span class="line">    discoveryClient.DeRegister(instanceId, config.Logger)</span><br><span class="line">    config.Logger.Println(<span class="type">error</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>接下来我们来验证两个组件的执行效果。</p>
<p>4，负载均衡和服务熔断效果验证</p>
<p>项目编写完成之后，我们需要检验它们的效果。我们首先启动Consul，启动命令如下：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">consul agent -dev</span><br></pre></td></tr></table></figure><br>接着在ch10-resiliency/string-service和ch10-resiliency/use-string-service目录分别启动string-service和use-string-service服务，启动命令如下：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go run main.go</span><br></pre></td></tr></table></figure><br>为了保证string-service存在多实例可调用，我们需要在启动string-service后再启动一个监听其他端口的新服务实例。我们将新的服务实例部署在10089端口下，在string-service目录下新开一个命令行，使用以下命令启动：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go run main.go -service.port 10089</span><br></pre></td></tr></table></figure><br>然后访问Consul的主页<code>http://localhost:8500/</code>，如图10-6所示。</p>
<blockquote>
<p>图10-6 Consul主页</p>
</blockquote>

<p>我们能够发现string-service和use-string-service服务都已经注册上去了，接着我们访问use-string-service服务的<code>/&#123;op&#125;/&#123;type&#125;/&#123;a&#125;/&#123;b&#125;</code>接口，通过use-string-service服务发起对string-service服务的远程调用。curl请求命令如下：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -X POST http://localhost:10086/op/concat/11/12</span><br></pre></td></tr></table></figure><br>即可以得到正确的响应如下：<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="number">1112</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><br>并且在use-string-service服务的命令行下查看到以下日志：<br><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">2024/06/13 16:56:46 current string-service ID is string-13f0bba1-5815-4d6b-8cad-892ad125471e </span><br><span class="line">and address:port is 127.0.0.1:10085</span><br></pre></td></tr></table></figure><br>从日志中我们可以发现本次请求转发到端口10085的string-service服务实例中进行处理。多次发起curl请求命令，我们会从日志中发现请求被随机分发到端口10085和10089的string-service服务实例中处理，说明我们的随机负载均衡器发挥了随机分发请求的作用。多次请求后的日志可能结果如下所示：<br><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">2024/06/13 16:59:10 current string-service ID is string-13f0bba1-5815-4d6b-8cad-892ad125471e </span><br><span class="line">and address:port is 127.0.0.1:10089</span><br><span class="line">2024/06/13 16:59:11 current string-service ID is string-afc426e0-7993-43d3-90eb-c85ed506e4fd </span><br><span class="line">and address:port is 127.0.0.1:10085</span><br><span class="line">2024/06/13 16:59:12 current string-service ID is string-13f0bba1-5815-4d6b-8cad-892ad125471e </span><br><span class="line">and address:port is 127.0.0.1:10089</span><br><span class="line">2024/06/13 16:59:13 current string-service ID is string-afc426e0-7993-43d3-90eb-c85ed506e4fd </span><br><span class="line">and address:port is 127.0.0.1:10085</span><br><span class="line">2024/06/13 16:59:14 current string-service ID is string-afc426e0-7993-43d3-90eb-c85ed506e4fd </span><br><span class="line">and address:port is 127.0.0.1:10085</span><br><span class="line">2024/06/13 16:59:15 current string-service ID is string-afc426e0-7993-43d3-90eb-c85ed506e4fd </span><br><span class="line">and address:port is 127.0.0.1:10085</span><br></pre></td></tr></table></figure><br>接着我们关闭所有string-service服务，继续使用curl请求结果，将会得到以下响应：<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fallback failed with &#x27;Hystrixfall back execute&#x27;. run error was &#x27;service instances are not existed&#x27;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><br>这个返回结果中包含了异常信息，同时日志中也会输出<code>service instances are not existed</code>，这说明了<code>hystrix.Do</code>中被包装的代码已经执行了。由于在创建UseStringService时我们设定了以<code>String.string</code>命名的断路器生效触发请求阀值为5次，连续使用curl接口请求失败5次之后继续访问将发现不再有先前的日志输出，返回的响应也变为以下异常：<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fallback failed with &#x27;Hystrixfall back execute&#x27;. run error was &#x27;hystrix: circuit open&#x27;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><br>这说明此时断路器已经打开，直接执行了失败回滚函数返回异常结果。如果5秒之后我们重新使用curl访问接口，将会发现请求重新执行了<code>hystrix.Do</code>中的远程调用代码，这是因为断路器打开之后的超时时间已经结束（默认为5秒钟），断路器进入了半开状态，允许程序重新执行远程调用，试探下游服务是否恢复可用状态，因为此时string-service服务处于一直不可用的状态，所以请求失败后，断路器又回到了打开状态。</p>
<h2 id="使用Go-kit-Hystrix中间件"><a href="#使用Go-kit-Hystrix中间件" class="headerlink" title="使用Go-kit Hystrix中间件"></a><span style="color:#00ACC1;">使用Go-kit Hystrix中间件</span></h2><p>Go-kit作为微服务工具集，围绕Endpoint提供了包括断路器、限流器、日志等多种中间件，它们都是以装饰者模式对原有的Endpoint进行行为包装，增加特定的组件行为。</p>
<p>Go-kit中提供了服务熔断Hystrix的中间件，对此我们可以在endpoint层直接使用，无需在service中自行封装。接下来我们将在use-string-service的endpoint层中直接使用Hystrix中间件修饰UseStringEndpoint。</p>
<p>【实例10-1】使用Go-kit Hystrix中间件修饰Endpoint</p>
<p>首先将service层中UseStringService方法的Hystrix相关代码移除，修改代码如下：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s UseStringService)</span></span> UseStringService (operationType, a, b <span class="type">string</span>) (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> operationResult <span class="type">string</span></span><br><span class="line">    <span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line"></span><br><span class="line">    instances := s.discoveryClient.DiscoverServices(StringService, config.Logger)</span><br><span class="line">    instanceList := <span class="built_in">make</span>([]*api.AgentService, <span class="built_in">len</span>(instances))</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(instances); i++ &#123;</span><br><span class="line">        instanceList[i] = instances[i].(*api.AgentService)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用负载均衡算法选取实例</span></span><br><span class="line">    selectInstance, err := s.loadbalance.SelectService(instanceList);</span><br><span class="line">    <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">        config.Logger.Printf(<span class="string">&quot;current string-service ID is %s and address:port is %s:%s\n&quot;</span>, selectInstance.ID, selectInstance.Address, strconv.Itoa(selectInstance.Port))</span><br><span class="line">        requestUrl := url.URL&#123;</span><br><span class="line">            Scheme: <span class="string">&quot;http&quot;</span>,</span><br><span class="line">            Host:   selectInstance.Address + <span class="string">&quot;:&quot;</span> + strconv.Itoa(selectInstance.Port),</span><br><span class="line">            Path:   <span class="string">&quot;/op/&quot;</span> + operationType + <span class="string">&quot;/&quot;</span> + a + <span class="string">&quot;/&quot;</span> + b,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        resp, err := http.Post(requestUrl.String(), <span class="string">&quot;&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">            result := &amp;StringResponse&#123;&#125;</span><br><span class="line">            err = json.NewDecoder(resp.Body).Decode(result)</span><br><span class="line">            <span class="keyword">if</span> err == <span class="literal">nil</span> &amp;&amp; result.Error == <span class="literal">nil</span>&#123;</span><br><span class="line">                operationResult = result.Result</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> operationResult, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>构建在endpoint层的Hystrix需要以Endpoint中返回的error来统计调用失败次数，因此需要修改endpoint层的MakeUseStringEndpoint创建函数，代码如下所示：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MakeUseStringEndpoint</span><span class="params">(svc service.Service)</span></span> endpoint.Endpoint &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context, request <span class="keyword">interface</span>&#123;&#125;)</span></span> (response <span class="keyword">interface</span>&#123;&#125;, err <span class="type">error</span>) &#123;</span><br><span class="line">        req := request.(UseStringRequest)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> (</span><br><span class="line">            res, a, b <span class="type">string</span></span><br><span class="line">            opError   <span class="type">error</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        a = req.A</span><br><span class="line">        b = req.B</span><br><span class="line"></span><br><span class="line">        res, opError = svc.UseStringService(req.RequestType, a, b)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> UseStringResponse&#123;Result: res&#125;, opError</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在上述代码中，我们不再将业务逻辑的错误封装到response中返回，而是直接通过Endpoint的err返回给transport层。最后我们修改main函数，在构建UseStringEndpoint时添加Go-kit Hystrix中间件，代码如下所示：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 引入中间件依赖</span></span><br><span class="line">    <span class="string">&quot;github.com/go-kit/kit/circuitbreaker&quot;</span></span><br><span class="line">    ...</span><br><span class="line">)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">var</span> svc service.Service</span><br><span class="line">svc = service.NewUseStringService(discoveryClient, &amp;loadbalance.RandomLoadBalance&#123;&#125; )</span><br><span class="line">useStringEndpoint := endpoint.MakeUseStringEndpoint(svc)</span><br><span class="line">useStringEndpoint = circuitbreaker.Hystrix(service.StringServiceCommandName)(useStringEndpoint)</span><br></pre></td></tr></table></figure><br>如此即可以实现与我们自定义Hystrix命令相同的功能。查看<code>circuitbreaker.Hystrix</code>的实现逻辑，可以发现Go-kit也是使用<code>hystrix.Do</code>方法对Endpoint的调用方法进行包装。但是需要注意的是，如果使用Go-kit提供的Hystrix中间件，将无法定义相关的失败回滚函数，不利于远程调用失败后的恢复处理工作。</p>
<h1 id="Hystrix详解"><a href="#Hystrix详解" class="headerlink" title="Hystrix详解"></a><span style="color:#339AFF;">Hystrix详解</span></h1><p>在上一小节中，我们通过一个实例演示了在如何在服务调用中使用Hystrix，通过Hystrix服务熔断能力为服务之间的安全调用保驾护航，在这一小节中我们将对Hystrix的详细使用和基本原理进行介绍。</p>
<h2 id="Hystrix基本使用"><a href="#Hystrix基本使用" class="headerlink" title="Hystrix基本使用"></a><span style="color:#00ACC1;">Hystrix基本使用</span></h2><p>hystrix-go中总共提供了两种方式包装远程调用的方式，一种是在10.3小节中使用的Hystrix同步执行包装方式，另外一种是异步执行包装模式。无论是哪种方式，都需要为被包装的执行函数赋予对应的Hystrix命名，命名相同的Hystrix命令的执行过程会使用相同的断路器进行统计和控制。</p>
<p>1，同步执行</p>
<p>同步Hystrix的使用方式如下：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">err := hystrix.Do(<span class="string">&quot;test command&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="comment">// 远程调用&amp;或者其他需要保护的方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">func</span> <span class="params">(err <span class="type">error</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="comment">// 失败回滚方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>除了定义Hystrix命令的命名和具体的被包装函数外，我们还可选择定义失败回滚方法，这个方法在被包装的远程调用函数返回异常或者断路器被打开时执行，我们可以在失败回滚方法中定义一些本地处理流程、重试或者回滚操作，以保证调用流程的正常进行。</p>
<p>2，异步执行</p>
<p>异步Hystrix的使用方式如下：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">resultChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">errChan := hystrix.Go(<span class="string">&quot;test command&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">error</span> &#123; </span><br><span class="line">    <span class="comment">// 远程调用&amp;或者其他需要保护的方法</span></span><br><span class="line">    resultChan &lt;- <span class="string">&quot;success&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;,  <span class="function"><span class="keyword">func</span> <span class="params">(e <span class="type">error</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="comment">// 失败回滚方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> err := &lt;- errChan:</span><br><span class="line">    <span class="comment">// 执行失败</span></span><br><span class="line"><span class="keyword">case</span> result := &lt;-resultChan</span><br><span class="line">    <span class="comment">// 执行成功</span></span><br><span class="line"><span class="keyword">case</span> &lt;-time.After(<span class="number">2</span> * time.Second): <span class="comment">// 超时设置</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Time out&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>如上代码所述，通过<code>hystrix.Go</code>异步执行的远程调用将会在与当前goroutine不同的goroutine中执行，执行的异常是通过channel的方式返回给调用goroutine。对此，如果我们想要获取到远程调用的返回结果，需要定义一个返回处理结果的resultChan，在远程调用结束后将结果放入resultChan，调用goroutine就可以通过resultChan获取到调用结果。</p>
<p>其实无论是同步调用还是异步调用，都是在一个新的goroutine中异步执行调用逻辑，只不过h<code>ystrix.Do</code>使用channel为我们将异步过程处理为同步调用。</p>
<h2 id="运行流程"><a href="#运行流程" class="headerlink" title="运行流程"></a><span style="color:#00ACC1;">运行流程</span></h2><p>除了进行服务熔断，Hystix在执行过程中还为不同命名的远程调用提供goroutine隔离的能力。goroutine 隔离使得不同的远程调用方法在固定数量的goroutine 下执行，控制了每种远程调用的并发数量，从而进行流量控制；在某个Hystrix命令调用出现大量超时阻塞时也仅仅会影响到与自己命名相同的Hystrix命令，并不会影响其他Hystix命令以及系统其他请求的执行。在hystrix命令配置的goroutine执行数量被占满时，该Hystrix命令的执行将会直接进入到失败回滚逻辑中，进行服务降级，保护服务调用者的资源稳定。</p>
<p>hystrix-go的整体调用流程如图10-7所示。</p>
<blockquote>
<p>图10-7 Hystrix-go整体调用流程</p>
</blockquote>
<img src="/2024/05/21/%E7%AC%AC10%E7%AB%A0-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%AE%B9%E9%94%99%E5%A4%84%E7%90%86%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/7.png" class="">
<p>我们来详细分析一下这个调用流程：</p>
<p>（1）每一个被Hystrix包装的远程调用逻辑都会封装为一个Hystrix命令，其内包含用户预置远程调用逻辑和失败回滚逻辑，根据Hystrix命名唯一确认一个Hystrix命令。</p>
<p>（2）根据Hystrix命令的命名获取到对应的断路器，判断断路器是否打开。如果断路器打开，将直接执行失败回滚逻辑，不执行真正的远程调用逻辑，此时服务调用已经被熔断了。如果断路器关闭或者处于半开状态，将向执行池请求执行通行证。</p>
<p>（3）Hystrix中每一种命令都限制了并发数量，当Hystrix命令的并发数量超过了执行池中设定的最大执行数量时，额外的请求就会被直接拒绝，进入到失败回滚逻辑中，避免服务过载。如果执行池中的最大执行数量未满，那么请求才会进入到执行远程调用的逻辑中。</p>
<p>（4）在执行远程调用时，执行出现异常或者下游服务执行超时，那么Hystrix命令将会向Metrics控制器上传执行结果，并进入到失败回滚逻辑中。</p>
<p>（5）Metrics控制器使用滑动窗口的方式统计一段时间的调用次数、失败次数、超时次数和被拒绝次数（执行池已满时请求被拒绝），如果该段时间内的错误频率（执行不成功的总次数占请求总次数）超过了断路器错误率阀值，那么断路器将会打开。在重试超时定时器到达之前的请求都会直接进入失败回滚逻辑，拒绝执行真正的远程调用。</p>
<h2 id="常用参数配置"><a href="#常用参数配置" class="headerlink" title="常用参数配置"></a><span style="color:#00ACC1;">常用参数配置</span></h2><p>对于每一种命名的Hystrix命令，我们可以在命令执行之前对命令进行自定义配置，能够进行配置的参数主要有：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CommandConfig is used to tune circuit settings at runtime</span></span><br><span class="line"><span class="keyword">type</span> CommandConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">    Timeout                <span class="type">int</span> <span class="string">`json:&quot;timeout&quot;`</span></span><br><span class="line">    MaxConcurrentRequests  <span class="type">int</span> <span class="string">`json:&quot;max_concurrent_requests&quot;`</span></span><br><span class="line">    RequestVolumeThreshold <span class="type">int</span> <span class="string">`json:&quot;request_volume_threshold&quot;`</span></span><br><span class="line">    SleepWindow            <span class="type">int</span> <span class="string">`json:&quot;sleep_window&quot;`</span></span><br><span class="line">    ErrorPercentThreshold  <span class="type">int</span> <span class="string">`json:&quot;error_percent_threshold&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>Hystrix命令配置信息封装在CommandConfig结构体中，这些配置信息的具体说明如下表10-1所示。</p>
<blockquote>
<p>表10-1</p>
</blockquote>
<img src="/2024/05/21/%E7%AC%AC10%E7%AB%A0-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%AE%B9%E9%94%99%E5%A4%84%E7%90%86%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/t-1-1.png" class="">
<img src="/2024/05/21/%E7%AC%AC10%E7%AB%A0-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%AE%B9%E9%94%99%E5%A4%84%E7%90%86%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/t-1-2.png" class="">
<p>在10.3小节的例子中，为了减少断路器生效的最小请求阀值，我们在NewUseStringService方法中将Hystrix的RequestVolumeThreshold设置为5。自定义Hystrix命令的配置如下所示：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">hystrix.ConfigureCommand(<span class="string">&quot;test_command&quot;</span>, hystrix.CommandConfig&#123;</span><br><span class="line">    <span class="comment">//设置参数</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>具体工作实践中，可以根据我们的需要，对表10-1中的5个配置参数进行修改，使Hystrix的保护功能更好地与当前系统相结合。在hystrix.settings.go文件中有Hystrix命令的默认参数设置，如果不需要调整Hystrix执行配置，可以直接使用默认设置执行。</p>
<h1 id="Hystrix监控面板"><a href="#Hystrix监控面板" class="headerlink" title="Hystrix监控面板"></a><span style="color:#339AFF;">Hystrix监控面板</span></h1><p>Hystrix中提供以HTTP的方式获取当前服务的Hystrix命令调用状态信息的能力，结合对应的Hystrix可视化面板，可以让开发人员对下游依赖服务运行状态有清晰地认知，有利于定位和排查微服务间的异常调用问题。</p>
<h2 id="获取Hystrix命令调用信息"><a href="#获取Hystrix命令调用信息" class="headerlink" title="获取Hystrix命令调用信息"></a><span style="color:#00ACC1;">获取Hystrix命令调用信息</span></h2><p>对于每一种Hystrix命令，我们都可以在运行时获取到其对应的断路器对象CircuitBreaker，通过<code>CircuitBreaker.IsOpen</code>可以获取当前命令的断路器是否打开，调用能否正常进行，看下面这个小例子：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">circuit,L:= hystrixiGetcircuit (<span class="string">&quot;test command&quot;</span>)</span><br><span class="line">fmt:Printlni(<span class="string">&quot;command test command&#x27;s .cifcuit</span></span><br><span class="line"><span class="string">open</span></span><br><span class="line"><span class="string">strcony.FormatBool(circuit:IsOpen()))</span></span><br></pre></td></tr></table></figure><br>在上述实例代码中，我们使用<code>hystrix.GetCircuit</code>获取到了test_command命令的断路器对象，并通过它判断断路器是否打开。除此之外，我们还可以使用hystrixStreamHandler看到当前服务实例下所有Hystrix命令的调用状态。hystrixStreamHandler会把Metrics控制器收集的所有状态信息按每秒1次的频率向所有连接的HTTP客户端推送，以供开发人员对系统状态进行及时把控和调整。</p>
<p>接下来我们将为use-string-service服务开启hystrixStreamHandler，修改<code>transport.MakeHttpHandler</code>方法如下所示：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><br>可以看到，在MakeHttpHandler方法的末尾，我们为HTTP添加了一个Hystrix信息的推送接口。</p>
<p>在ch10-resiliency/use-string-service目录下启动use-string-service服务，启动命令如下：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go run main.go</span><br></pre></td></tr></table></figure><br>我们先调用一次curl，以保证Metrics控制器中已经收集到数据，命令如下：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -X POST http://1ocalhost:10086/op/Concat/11/12</span><br></pre></td></tr></table></figure><br>接着访问<code>http://localhost:10086/hystrix/stream</code>接口，可以看到Metrics控制器中的Hystrix命令调用信息被持续通过流推送到浏览器中，如下所示：<br><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><br>返回的信息主要包含近段时间内各种Hystrix命令的调用状态、结果以及它们对应的执行池和断路器的状态，通过它们就可以了解当前服务依赖的下游服务的状态，对异常的服务及时进行恢复处理。</p>
<h2 id="使用HystrixDashboard可视化面板"><a href="#使用HystrixDashboard可视化面板" class="headerlink" title="使用HystrixDashboard可视化面板"></a><span style="color:#00ACC1;">使用HystrixDashboard可视化面板</span></h2><p>hystrixStreamHandler控制器中返回的数据过于杂乱，无法快速发现有用数据和定位问题，对此，我们可以结合Hystrix Dashboard对上述信息进行直观的查看。由于hystrix-go没有提供对应的可视化界面，我们采用开源的mlabouardy/hystrix-dashboard进行可视化查看。接下来我们演示docker版本的mlabouardy/hystrix-dashboard的使用，使用以下命令启动该可视化工具的docker镜像：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run --name hystrix-dashboard -d -p 10087:8080 mlabouardy/hystrix-dashboard:latest</span></span><br></pre></td></tr></table></figure><br>接着我们访问Hystrix Dashoard的主界面，地址为<code>http://localhost:10087/hystrix</code>，如图10-8所示。</p>
<blockquote>
<p>图10-8 Hystrix Dashboard主界面</p>
</blockquote>
<p>在地址栏输入hystrixStreamHandler数据流的地址<code>http://10.93.244.130:10086/hystrix/stream</code>，因为Hystrix Dashboard运行在docker容器上，并且我们的容器是以桥接的网络模式启动，所以要把hystrixStreamHandler的host替换为本机地址，比如笔者的机器局域网地址为10.93.244.130。填入对应的信息后如下图10-9所示。</p>
<blockquote>
<p>图10-9 输入hystrixStreamHandler地址</p>
</blockquote>
<p>单击Monitor Stream进入到use-string-service服务的Hystrix Dashboard中，如图10-10所示。</p>
<blockquote>
<p>图10-10 Hystrix Dashboard监控页面</p>
</blockquote>
<p>从图10-10中可以看到，<code>String.string</code>Hystrix命令的执行失败率是100%，断路器已经打开，防止请求进入到真正的远程调用逻辑中。</p>
<h1 id="实践案例：在网关中添加Hystrix熔断和负载均衡"><a href="#实践案例：在网关中添加Hystrix熔断和负载均衡" class="headerlink" title="实践案例：在网关中添加Hystrix熔断和负载均衡"></a><span style="color:#339AFF;">实践案例：在网关中添加Hystrix熔断和负载均衡</span></h1><p>在这个实践案例中，我们主要来改造第9章中手动实现的API网关，为API反向代理的微服务调用添加Hystrix的熔断保护和资源隔离功能以及负载均衡能力，以保护API网关的稳定运行。</p>
<p>在第9章手动实现的API网关中，我们主要通过ReverseProxy实现了反向代理的功能，所以我们本实例的工作量主要集中在使用Hystrix包装整个反向代理逻辑和添加负载均衡器方面。</p>
<p>首先定义HystrixHandler用于实现<code>http.Handler</code>接口，表明它可用于处理HTTP请求，结构体定义和构造函数如下代码所示：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><br>在 HystrixHandler结构体中我们定义了hystrixs用于记录当前注册的Hystrix命令，discoveryCiient变量用于服务发现，loadbalance变量用于负载均衡。</p>
<p>接下来我们实现ServeHTTP接口，其主要逻辑是将反向代理的逻辑使用<code>hystrix.Do</code>包装起来，代码如下所示：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><br>在上述代码中，主要进行了以下工作：</p>
<p>（1）根据请求路径中提供的服务名从hystrixHandler中查找该服务名的Hystrix命名是否已经配置过了。如果没有，对hystrix命令进行初始化配置。</p>
<p>（2）在<code>hystrix.Do</code>的包装中执行3、4、5步骤。</p>
<p>（3）根据请求路径中提供的服务名从discoveryClient中获取服务实例列表。</p>
<p>（4）使用负载均衡器从服务实例列表中选取一个服务实例地址用于构造ReverseProxy；并定义errorHandler，用于从ReverseProxy获取执行失败后抛出的异常。</p>
<p>（5）执行<code>ReverseProxy.ServeHTTP</code>进行代理转发，如果代理转发过程中出错将会反馈给 Hystrix。</p>
<p>（6）如果<code>hystrix.Do</code>中执行的代理转发逻辑出错，向客户端返回服务端500的错误。</p>
<p>最后我们将这个使用Hystrix包装过的反向代理注册到Web服务器中，修改gateway.go代码如下：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><br>这里，我们仅需要将原来生成反向代理的方法修改为我们定义的HystrixHandler即可。通过这样的方式，HystrixHandler会在下游服务器不可用时，切断网关对该服务器请求的转发，保护网关的线程资源，避免服务雪崩的发生。同时负载均衡器也能将请求分发服务集群的各个服务中，提高服务集群的处理能力。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a><span style="color:#339AFF;">小结</span></h1><p>本章主要介绍了微服务架构中的服务熔断组件和负载均衡组件。我们首先了解了服务熔断的必要性，理解了下游服务的崩溃可能会引发服务雪崩而导致整个分布式系统的崩溃，同时也明白了在微服务体系中负载均衡组件发挥的强大横向扩展能力；接着介绍了断路器在服务调用中对服务调用者提供的强大保护能力，并对负载均衡的类别和几类负载均衡算法进行了了解；最后我们使用主流的hystrix-go 服务熔断组件结合自定义的负载均衡器，在微服务调用和网关转发中进行实践，实现了断路器对上游服务提供的保护作用以及负载均衡器请求分发的作用。</p>
<p>在微服务架构中，原本的单体应用按照业务被划分为数量众多的微服务。由于业务依赖的关系，服务之间经常会发生远程调用。我们从服务注册与发现中心中获取的服务实例列表，需要借助负载均衡组件选取合适的服务实例才能发起远程调用。负载均衡组件能够有效地将请求均衡地分发到服务集群的各个服务实例中，提高服务集群的负载和吞吐量。服务熔断组件能够在下游服务出现异常时，及时切断服务调用者对服务提供者的请求，达到保护上游服务稳定性的目的。负载均衡组件和服务熔断组件是微服务架构的不可或缺的基础组件，它们为微服务之间的远程调用提供了有效的支持和保障。</p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go语言高并发与微服务实战</tag>
      </tags>
  </entry>
  <entry>
    <title>第9章 构建api网关并优雅的处理各服务配置</title>
    <url>/2024/05/21/%E7%AC%AC9%E7%AB%A0-%E6%9E%84%E5%BB%BAapi%E7%BD%91%E5%85%B3%E5%B9%B6%E4%BC%98%E9%9B%85%E7%9A%84%E5%A4%84%E7%90%86%E5%90%84%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>思考并回答以下问题：</p>
<span id="more"></span>]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go-Zero即时通讯微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>第8章 实现im服务消息群聊及消息可读未读</title>
    <url>/2024/05/21/%E7%AC%AC8%E7%AB%A0-%E5%AE%9E%E7%8E%B0im%E6%9C%8D%E5%8A%A1%E6%B6%88%E6%81%AF%E7%BE%A4%E8%81%8A%E5%8F%8A%E6%B6%88%E6%81%AF%E5%8F%AF%E8%AF%BB%E6%9C%AA%E8%AF%BB/</url>
    <content><![CDATA[<p>思考并回答以下问题：</p>
<span id="more"></span>
<p>群的消息该如何存储？</p>
<p>如何更新及维护消息记录</p>
<p>群，是对一个集合内的所有用户去发送消息，对于群的消息，只会保存一份，基于读扩散来进行实现。</p>
<p>有一个字段类型，还有一个接收的群ID，</p>
<p>先根据群的ID去查找，需要迭代对应的用户</p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go-Zero即时通讯微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>第7章 构建im服务并实现用户私聊及离线消息读取</title>
    <url>/2024/05/21/%E7%AC%AC7%E7%AB%A0-%E6%9E%84%E5%BB%BAim%E6%9C%8D%E5%8A%A1%E5%B9%B6%E5%AE%9E%E7%8E%B0%E7%94%A8%E6%88%B7%E7%A7%81%E8%81%8A%E5%8F%8A%E7%A6%BB%E7%BA%BF%E6%B6%88%E6%81%AF%E8%AF%BB%E5%8F%96/</url>
    <content><![CDATA[<p>思考并回答以下问题：</p>
<span id="more"></span>
<img src="/2024/05/21/%E7%AC%AC7%E7%AB%A0-%E6%9E%84%E5%BB%BAim%E6%9C%8D%E5%8A%A1%E5%B9%B6%E5%AE%9E%E7%8E%B0%E7%94%A8%E6%88%B7%E7%A7%81%E8%81%8A%E5%8F%8A%E7%A6%BB%E7%BA%BF%E6%B6%88%E6%81%AF%E8%AF%BB%E5%8F%96/1.png" class="">
<p>其实都是参考这里面的例子来进行封装的，没有什么神秘的。</p>
<blockquote>
<p>apps/im/ws/websocket/server.go</p>
</blockquote>
<p>无任何依赖</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> websocket</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;context&quot;</span></span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/zeromicro/go-zero/core/threading&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/gorilla/websocket&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/zeromicro/go-zero/core/logx&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AckType <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    NoAck AckType = <span class="literal">iota</span></span><br><span class="line">    OnlyAck</span><br><span class="line">    RigorAck</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t AckType)</span></span> ToString() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> t &#123;</span><br><span class="line">    <span class="keyword">case</span> OnlyAck:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OnlyAck&quot;</span></span><br><span class="line">    <span class="keyword">case</span> RigorAck:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;RigorAck&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;NoAck&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">    sync.RWMutex</span><br><span class="line"></span><br><span class="line">    *threading.TaskRunner</span><br><span class="line"></span><br><span class="line">    opt            *serverOption</span><br><span class="line">    authentication Authentication</span><br><span class="line"></span><br><span class="line">    routes     <span class="keyword">map</span>[<span class="type">string</span>]HandlerFunc</span><br><span class="line">    addr       <span class="type">string</span></span><br><span class="line">    patten     <span class="type">string</span></span><br><span class="line">    listenOn   <span class="type">string</span></span><br><span class="line">    discover   Discover</span><br><span class="line">    connToUser <span class="keyword">map</span>[*Conn]<span class="type">string</span> <span class="comment">// 保存到这个map里，key是连接，value是用户id</span></span><br><span class="line">    userToConn <span class="keyword">map</span>[<span class="type">string</span>]*Conn <span class="comment">// 这个也是个map，key，value和上面的相反</span></span><br><span class="line"></span><br><span class="line">    upgrader websocket.Upgrader </span><br><span class="line">    logx.Logger</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewServer</span><span class="params">(addr <span class="type">string</span>, opts ...ServerOptions)</span></span> *Server &#123;</span><br><span class="line">    opt := newServerOptions(opts...)</span><br><span class="line"></span><br><span class="line">    s := &amp;Server&#123;</span><br><span class="line">        routes: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]HandlerFunc),</span><br><span class="line">        addr:   addr,</span><br><span class="line">        patten: opt.patten,</span><br><span class="line">        opt:    &amp;opt,</span><br><span class="line">        upgrader: websocket.Upgrader&#123;</span><br><span class="line">            CheckOrigin: <span class="function"><span class="keyword">func</span><span class="params">(r *http.Request)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        authentication: opt.Authentication,</span><br><span class="line"></span><br><span class="line">        connToUser: <span class="built_in">make</span>(<span class="keyword">map</span>[*Conn]<span class="type">string</span>),</span><br><span class="line">        userToConn: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]*Conn),</span><br><span class="line"></span><br><span class="line">        listenOn:   FigureOutListenOn(addr),</span><br><span class="line">        Logger:     logx.WithContext(context.Background()),</span><br><span class="line">        TaskRunner: threading.NewTaskRunner(opt.concurrency),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存在服务发现，采用分布式im通信的时候; 默认不做任何处理</span></span><br><span class="line">    s.discover.Register(fmt.Sprintf(<span class="string">&quot;%s&quot;</span>, s.listenOn))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> ServerWs(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> r := <span class="built_in">recover</span>(); r != <span class="literal">nil</span> &#123;</span><br><span class="line">            s.Errorf(<span class="string">&quot;server handler ws recover err %v&quot;</span>, r)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    conn := NewConn(s, w, r)</span><br><span class="line">    <span class="keyword">if</span> conn == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> !s.authentication.Auth(w, r) &#123;</span><br><span class="line">        <span class="comment">//conn.WriteMessage(websocket.TextMessage, []byte(fmt.Sprint(&quot;不具备访问权限&quot;)))</span></span><br><span class="line">        s.Send(&amp;Message&#123;FrameType: FrameData, Data: fmt.Sprint(<span class="string">&quot;不具备访问权限&quot;</span>)&#125;, conn)</span><br><span class="line">        conn.Close()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录连接</span></span><br><span class="line">    s.addConn(conn, r)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理连接</span></span><br><span class="line">    <span class="keyword">go</span> s.handlerConn(conn)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据连接对象执行任务处理</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> handlerConn(conn *Conn) &#123;</span><br><span class="line"></span><br><span class="line">    uids := s.GetUsers(conn)</span><br><span class="line">    conn.Uid = uids[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果存在服务发现则进行注册；默认不做任何处理</span></span><br><span class="line">    s.discover.BoundUser(conn.Uid)</span><br><span class="line">    <span class="comment">// 处理任务</span></span><br><span class="line">    <span class="keyword">go</span> s.handlerWrite(conn)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> s.isAck(<span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">go</span> s.readAck(conn)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="comment">// 获取请求消息</span></span><br><span class="line">        _, msg, err := conn.ReadMessage()</span><br><span class="line">        fmt.Println(<span class="string">&quot;new msg &quot;</span>, <span class="type">string</span>(msg), err)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            s.Errorf(<span class="string">&quot;websocket conn read message err %v&quot;</span>, err)</span><br><span class="line">            s.Close(conn)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 解析消息</span></span><br><span class="line">        <span class="keyword">var</span> message Message</span><br><span class="line">        <span class="keyword">if</span> err = json.Unmarshal(msg, &amp;message); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            s.Errorf(<span class="string">&quot;json unmarshal err %v, msg %v&quot;</span>, err, <span class="type">string</span>(msg))</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 依据消息进行处理</span></span><br><span class="line">        <span class="keyword">if</span> s.isAck(&amp;message) &#123;</span><br><span class="line">            s.Infof(<span class="string">&quot;conn message read ack msg %v&quot;</span>, message)</span><br><span class="line">            conn.appendMsgMq(&amp;message)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            conn.message &lt;- &amp;message</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> isAck(message *Message) <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> message == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s.opt.ack != NoAck</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.opt.ack != NoAck &amp;&amp; message.FrameType != FrameNoAck &amp;&amp; message.FrameType != FrameTranspond</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取消息的ack</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> readAck(conn *Conn) &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;-conn.done:</span><br><span class="line">            s.Infof(<span class="string">&quot;close message ack uid %v &quot;</span>, conn.Uid)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从队列中读取新的消息</span></span><br><span class="line">        conn.messageMu.Lock()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(conn.readMessage) == <span class="number">0</span> &#123;</span><br><span class="line">            conn.messageMu.Unlock()</span><br><span class="line">            <span class="comment">// 增加睡眠</span></span><br><span class="line">            time.Sleep(<span class="number">100</span> * time.Microsecond)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取第一条</span></span><br><span class="line">        message := conn.readMessage[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断ack的方式</span></span><br><span class="line">        <span class="keyword">switch</span> s.opt.ack &#123;</span><br><span class="line">        <span class="keyword">case</span> OnlyAck:</span><br><span class="line">            <span class="comment">// 直接给客户端回复</span></span><br><span class="line">            s.Send(&amp;Message&#123;</span><br><span class="line">                FrameType: FrameAck,</span><br><span class="line">                Id:        message.Id,</span><br><span class="line">                AckSeq:    message.AckSeq + <span class="number">1</span>,</span><br><span class="line">            &#125;, conn)</span><br><span class="line">            <span class="comment">// 进行业务处理</span></span><br><span class="line">            <span class="comment">// 把消息从队列中移除</span></span><br><span class="line">            conn.readMessage = conn.readMessage[<span class="number">1</span>:]</span><br><span class="line">            conn.messageMu.Unlock()</span><br><span class="line"></span><br><span class="line">            conn.message &lt;- message</span><br><span class="line">        <span class="keyword">case</span> RigorAck:</span><br><span class="line">            <span class="comment">// 先回</span></span><br><span class="line">            <span class="keyword">if</span> message.AckSeq == <span class="number">0</span> &#123;</span><br><span class="line">                <span class="comment">// 还未确认</span></span><br><span class="line">                conn.readMessage[<span class="number">0</span>].AckSeq++</span><br><span class="line">                conn.readMessage[<span class="number">0</span>].ackTime = time.Now()</span><br><span class="line">                s.Send(&amp;Message&#123;</span><br><span class="line">                    FrameType: FrameAck,</span><br><span class="line">                    Id:        message.Id,</span><br><span class="line">                    AckSeq:    message.AckSeq,</span><br><span class="line">                &#125;, conn)</span><br><span class="line">                s.Infof(<span class="string">&quot;message ack RigorAck send mid %v, seq %v , time%v&quot;</span>, message.Id, message.AckSeq,</span><br><span class="line">                    message.ackTime)</span><br><span class="line">                conn.messageMu.Unlock()</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 再验证</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 1. 客户端返回结果，再一次确认</span></span><br><span class="line">            <span class="comment">// 得到客户端的序号</span></span><br><span class="line">            msgSeq := conn.readMessageSeq[message.Id]</span><br><span class="line">            <span class="keyword">if</span> msgSeq.AckSeq &gt; message.AckSeq &#123;</span><br><span class="line">                <span class="comment">// 确认</span></span><br><span class="line">                conn.readMessage = conn.readMessage[<span class="number">1</span>:]</span><br><span class="line">                conn.messageMu.Unlock()</span><br><span class="line">                conn.message &lt;- message</span><br><span class="line">                s.Infof(<span class="string">&quot;message ack RigorAck success mid %v&quot;</span>, message.Id)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 客户端没有确认，考虑是否超过了ack的确认时间</span></span><br><span class="line">            val := s.opt.ackTimeout - time.Since(message.ackTime)</span><br><span class="line">            <span class="keyword">if</span> !message.ackTime.IsZero() &amp;&amp; val &lt;= <span class="number">0</span> &#123;</span><br><span class="line">                <span class="comment">//      2.2 超过结束确认</span></span><br><span class="line">                <span class="built_in">delete</span>(conn.readMessageSeq, message.Id)</span><br><span class="line">                conn.readMessage = conn.readMessage[<span class="number">1</span>:]</span><br><span class="line">                conn.messageMu.Unlock()</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//      2.1 未超过，重新发送</span></span><br><span class="line">            conn.messageMu.Unlock()</span><br><span class="line">            s.Send(&amp;Message&#123;</span><br><span class="line">                FrameType: FrameAck,</span><br><span class="line">                Id:        message.Id,</span><br><span class="line">                AckSeq:    message.AckSeq,</span><br><span class="line">            &#125;, conn)</span><br><span class="line">            <span class="comment">// 睡眠一定的时间</span></span><br><span class="line">            time.Sleep(<span class="number">3</span> * time.Second)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 任务的处理</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> handlerWrite(conn *Conn) &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;-conn.done:</span><br><span class="line">            <span class="comment">// 连接关闭</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">case</span> message := &lt;-conn.message:</span><br><span class="line">            <span class="keyword">switch</span> message.FrameType &#123;</span><br><span class="line">            <span class="keyword">case</span> FramePing:</span><br><span class="line">                s.Send(&amp;Message&#123;FrameType: FramePing&#125;, conn)</span><br><span class="line">            <span class="keyword">case</span> FrameData:</span><br><span class="line">                <span class="comment">// 根据请求的method分发路由并执行</span></span><br><span class="line">                <span class="keyword">if</span> handler, ok := s.routes[message.Method]; ok &#123;</span><br><span class="line">                    handler(s, conn, message)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    s.Send(&amp;Message&#123;FrameType: FrameData, Data: fmt.Sprintf(<span class="string">&quot;不存在执行的方法 %v 请检查&quot;</span>, message.Method)&#125;, conn)</span><br><span class="line">                    <span class="comment">//conn.WriteMessage(&amp;Message&#123;&#125;, []byte(fmt.Sprintf(&quot;不存在执行的方法 %v 请检查&quot;, message.Method)))</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> s.isAck(message) &#123;</span><br><span class="line">                conn.messageMu.Lock()</span><br><span class="line">                <span class="built_in">delete</span>(conn.readMessageSeq, message.Id)</span><br><span class="line">                conn.messageMu.Unlock()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> addConn(conn *Conn, req *http.Request) &#123;</span><br><span class="line">    uid := s.authentication.UserId(req)</span><br><span class="line"></span><br><span class="line">    s.RWMutex.Lock()</span><br><span class="line">    <span class="keyword">defer</span> s.RWMutex.Unlock()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证用户是否之前登入过</span></span><br><span class="line">    <span class="keyword">if</span> c := s.userToConn[uid]; c != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">// 关闭之前的连接</span></span><br><span class="line">        c.Close()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    s.connToUser[conn] = uid</span><br><span class="line">    s.userToConn[uid] = conn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> GetConn(uid <span class="type">string</span>) *Conn &#123;</span><br><span class="line">    s.RWMutex.RLock()</span><br><span class="line">    <span class="keyword">defer</span> s.RWMutex.RUnlock()</span><br><span class="line"></span><br><span class="line">    fmt.Println(s.userToConn)</span><br><span class="line">    <span class="keyword">return</span> s.userToConn[uid]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> GetConns(uids ...<span class="type">string</span>) []*Conn &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(uids) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    s.RWMutex.RLock()</span><br><span class="line">    <span class="keyword">defer</span> s.RWMutex.RUnlock()</span><br><span class="line"></span><br><span class="line">    res := <span class="built_in">make</span>([]*Conn, <span class="number">0</span>, <span class="built_in">len</span>(uids))</span><br><span class="line">    <span class="keyword">for</span> _, uid := <span class="keyword">range</span> uids &#123;</span><br><span class="line">        res = <span class="built_in">append</span>(res, s.userToConn[uid])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> GetUsers(conns ...*Conn) []<span class="type">string</span> &#123;</span><br><span class="line"></span><br><span class="line">    s.RWMutex.RLock()</span><br><span class="line">    <span class="keyword">defer</span> s.RWMutex.RUnlock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> res []<span class="type">string</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(conns) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="comment">// 获取全部</span></span><br><span class="line">        res = <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">0</span>, <span class="built_in">len</span>(s.connToUser))</span><br><span class="line">        <span class="keyword">for</span> _, uid := <span class="keyword">range</span> s.connToUser &#123;</span><br><span class="line">            res = <span class="built_in">append</span>(res, uid)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 获取部分</span></span><br><span class="line">        res = <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">0</span>, <span class="built_in">len</span>(conns))</span><br><span class="line">        <span class="keyword">for</span> _, conn := <span class="keyword">range</span> conns &#123;</span><br><span class="line">            res = <span class="built_in">append</span>(res, s.connToUser[conn])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> Close(conn *Conn) &#123;</span><br><span class="line">    s.RWMutex.Lock()</span><br><span class="line">    <span class="keyword">defer</span> s.RWMutex.Unlock()</span><br><span class="line"></span><br><span class="line">    uid := s.connToUser[conn]</span><br><span class="line">    <span class="keyword">if</span> uid == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">        <span class="comment">// 已经被关闭</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">delete</span>(s.connToUser, conn)</span><br><span class="line">    <span class="built_in">delete</span>(s.userToConn, uid)</span><br><span class="line"></span><br><span class="line">    conn.Close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> SendByUserId(msg <span class="keyword">interface</span>&#123;&#125;, sendIds ...<span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sendIds) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s.Send(msg, s.GetConns(sendIds...)...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> Send(msg <span class="keyword">interface</span>&#123;&#125;, conns ...*Conn) <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(conns) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data, err := json.Marshal(msg)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, conn := <span class="keyword">range</span> conns &#123;</span><br><span class="line">        <span class="keyword">if</span> err := conn.WriteMessage(websocket.TextMessage, data); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> AddRoutes(rs []Route) &#123;</span><br><span class="line">    <span class="keyword">for</span> _, r := <span class="keyword">range</span> rs &#123;</span><br><span class="line">        s.routes[r.Method] = r.Handler</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> Start() &#123;</span><br><span class="line">    http.HandleFunc(s.patten, s.ServerWs)</span><br><span class="line">    s.Info(http.ListenAndServe(s.addr, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> Stop() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;停止服务&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>apps/im/ws/websocket/connection.go</p>
</blockquote>
<p>无任何依赖，是对<code>*websocket.Conn</code>的管理</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> websocket</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;github.com/gorilla/websocket&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Conn <span class="keyword">struct</span> &#123;</span><br><span class="line">    idleMu sync.Mutex</span><br><span class="line"></span><br><span class="line">    Uid <span class="type">string</span></span><br><span class="line"></span><br><span class="line">    *websocket.Conn</span><br><span class="line">    s *Server</span><br><span class="line"></span><br><span class="line">    idle              time.Time</span><br><span class="line">    maxConnectionIdle time.Duration</span><br><span class="line"></span><br><span class="line">    messageMu      sync.Mutex</span><br><span class="line">    readMessage    []*Message</span><br><span class="line">    readMessageSeq <span class="keyword">map</span>[<span class="type">string</span>]*Message</span><br><span class="line"></span><br><span class="line">    message <span class="keyword">chan</span> *Message</span><br><span class="line"></span><br><span class="line">    done <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewConn</span><span class="params">(s *Server, w http.ResponseWriter, r *http.Request)</span></span> *Conn &#123;</span><br><span class="line">    <span class="keyword">var</span> respHeader http.Header</span><br><span class="line">    <span class="keyword">if</span> protocol := r.Header.Get(<span class="string">&quot;Sec-Websocket-Protocol&quot;</span>); protocol != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">        respHeader = http.Header&#123;</span><br><span class="line">            <span class="string">&quot;Sec-Websocket-Protocol&quot;</span>: []<span class="type">string</span>&#123;protocol&#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    c, err := s.upgrader.Upgrade(w, r, respHeader)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        s.Errorf(<span class="string">&quot;upgrade err %v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    conn := &amp;Conn&#123;</span><br><span class="line">        Conn:              c,</span><br><span class="line">        s:                 s,</span><br><span class="line">        idle:              time.Now(),</span><br><span class="line">        maxConnectionIdle: s.opt.maxConnectionIdle,</span><br><span class="line">        readMessage:       <span class="built_in">make</span>([]*Message, <span class="number">0</span>, <span class="number">2</span>),</span><br><span class="line">        readMessageSeq:    <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]*Message, <span class="number">2</span>),</span><br><span class="line">        message:           <span class="built_in">make</span>(<span class="keyword">chan</span> *Message, <span class="number">1</span>),</span><br><span class="line">        done:              <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> conn.keepalive()</span><br><span class="line">    <span class="keyword">return</span> conn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Conn)</span></span> appendMsgMq(msg *Message) &#123;</span><br><span class="line">    c.messageMu.Lock()</span><br><span class="line">    <span class="keyword">defer</span> c.messageMu.Unlock()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读队列中</span></span><br><span class="line">    <span class="keyword">if</span> m, ok := c.readMessageSeq[msg.Id]; ok &#123;</span><br><span class="line">        <span class="comment">// 已经有消息的记录，该消息已经有ack的确认</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(c.readMessage) == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="comment">// 队列中没有该消息</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// msg.AckSeq &gt; m.AckSeq</span></span><br><span class="line">        <span class="keyword">if</span> m.AckSeq &gt;= msg.AckSeq &#123;</span><br><span class="line">            <span class="comment">// 没有进行ack的确认, 重复</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        c.readMessageSeq[msg.Id] = msg</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 还没有进行ack的确认, 避免客户端重复发送多余的ack消息</span></span><br><span class="line">    <span class="keyword">if</span> msg.FrameType == FrameAck &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    c.readMessage = <span class="built_in">append</span>(c.readMessage, msg)</span><br><span class="line">    c.readMessageSeq[msg.Id] = msg</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Conn)</span></span> ReadMessage() (messageType <span class="type">int</span>, p []<span class="type">byte</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">    messageType, p, err = c.Conn.ReadMessage()</span><br><span class="line"></span><br><span class="line">    c.idleMu.Lock()</span><br><span class="line">    <span class="keyword">defer</span> c.idleMu.Unlock()</span><br><span class="line">    c.idle = time.Time&#123;&#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Conn)</span></span> WriteMessage(messageType <span class="type">int</span>, data []<span class="type">byte</span>) <span class="type">error</span> &#123;</span><br><span class="line">    c.idleMu.Lock()</span><br><span class="line">    <span class="keyword">defer</span> c.idleMu.Unlock()</span><br><span class="line">    <span class="comment">// 方法是并不安全</span></span><br><span class="line">    err := c.Conn.WriteMessage(messageType, data)</span><br><span class="line">    c.idle = time.Now()</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Conn)</span></span> Close() <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-c.done:</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">close</span>(c.done)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c.Conn.Close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Conn)</span></span> keepalive() &#123;</span><br><span class="line">    idleTimer := time.NewTimer(c.maxConnectionIdle)</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        idleTimer.Stop()</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;-idleTimer.C:</span><br><span class="line">            c.idleMu.Lock()</span><br><span class="line">            idle := c.idle</span><br><span class="line">            <span class="keyword">if</span> idle.IsZero() &#123; <span class="comment">// The connection is non-idle.</span></span><br><span class="line">                c.idleMu.Unlock()</span><br><span class="line">                idleTimer.Reset(c.maxConnectionIdle)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            val := c.maxConnectionIdle - time.Since(idle)</span><br><span class="line">            c.idleMu.Unlock()</span><br><span class="line">            <span class="keyword">if</span> val &lt;= <span class="number">0</span> &#123;</span><br><span class="line">                <span class="comment">// The connection has been idle for a duration of keepalive.MaxConnectionIdle or more.</span></span><br><span class="line">                <span class="comment">// Gracefully close the connection.</span></span><br><span class="line">                c.s.Close(c)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            idleTimer.Reset(val)</span><br><span class="line">        <span class="keyword">case</span> &lt;-c.done:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go-Zero即时通讯微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>第6章 构建用户/社交服务并分析服务发现与负载均衡原理</title>
    <url>/2024/05/21/%E7%AC%AC6%E7%AB%A0-%E6%9E%84%E5%BB%BA%E7%94%A8%E6%88%B7-%E7%A4%BE%E4%BA%A4%E6%9C%8D%E5%8A%A1%E5%B9%B6%E5%88%86%E6%9E%90%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>思考并回答以下问题：</p>
<span id="more"></span>
<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>先写脚本</p>
<p>1，构建镜像</p>
<blockquote>
<p>deploy/dockerfile/Dockerfile_user_rpc_dev</p>
</blockquote>
<p>这是根据编译好的二进制文件构建镜像用的</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> registry.cn-hangzhou.aliyuncs.com/easy-im/alpine:latest </span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> SERVER_NAME=<span class="keyword">user</span></span><br><span class="line"><span class="keyword">ARG</span> SERVER_TYPE=rpc</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> RUN_BIN bin/$&#123;SERVER_NAME&#125;-$&#123;SERVER_TYPE&#125;</span><br><span class="line"><span class="keyword">ENV</span> RUN_CONF /$&#123;SERVER_NAME&#125;/conf/$&#123;SERVER_NAME&#125;.yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> /<span class="variable">$SERVER_NAME</span> &amp;&amp; <span class="built_in">mkdir</span> /<span class="variable">$SERVER_NAME</span>/bin &amp;&amp; <span class="built_in">mkdir</span> /<span class="variable">$SERVER_NAME</span>/conf &amp;&amp; <span class="built_in">mkdir</span> -p /<span class="variable">$SERVER_NAME</span>/etc/conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个关键词的意思是复制的意思，可以将宿主机中的内容复制到容器中</span></span><br><span class="line"><span class="comment"># 命令 左边是宿主机的目录，右边是容器目录</span></span><br><span class="line"><span class="comment"># 复制编译后的二进制文件</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./bin/<span class="variable">$SERVER_NAME</span>-<span class="variable">$SERVER_TYPE</span> /<span class="variable">$SERVER_NAME</span>/bin/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制配置文件</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./apps/<span class="variable">$SERVER_NAME</span>/<span class="variable">$SERVER_TYPE</span>/etc/dev/<span class="variable">$SERVER_NAME</span>.yaml /<span class="variable">$SERVER_NAME</span>/conf/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为二进制提供执行权限</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> +x /<span class="variable">$SERVER_NAME</span>/bin/<span class="variable">$SERVER_NAME</span>-<span class="variable">$SERVER_TYPE</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 该命令指定容器会默认进入那个目录，如我们每次进入服务器的时候会自动进入root目录一样的作用</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /<span class="variable">$SERVER_NAME</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个命令可以让我们的docker容器在启动的时候就执行下面的命令</span></span><br><span class="line"><span class="comment"># 与CMD不同之处是，在docker run 后跟的命令不能替换它，它仍然会启动的时候执行</span></span><br><span class="line"><span class="comment"># ENTRYPOINT [&quot;$RUN_BIN&quot;, &quot;-f&quot;, &quot;$RUN_CONF&quot;] // 这种写法不支持对环境变量的解析，</span></span><br><span class="line"><span class="comment"># 您正在使用ENTRYPOINT 的exec形式。与shell表单不同，exec表单不会调用命令shell。这意味着正常的外壳处理不会发生。例如，ENTRYPOINT [ &quot;echo&quot;, &quot;$HOME&quot; ]</span></span><br><span class="line"><span class="comment"># 将不会在$HOME上进行变量替换。如果要进行shell处理，则可以使用shell形式或直接执行shell，例如：ENTRYPOINT [ &quot;sh&quot;, &quot;-c&quot;, &quot;echo $HOME&quot; ]。</span></span><br><span class="line"><span class="comment"># 当使用exec表单并直接执行shell时（例如在shell表单中），是由shell进行环境变量扩展，而不是docker。（来自Dockerfile参考）</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> <span class="variable">$RUN_BIN</span> -f <span class="variable">$RUN_CONF</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>2，生成可执行文件并发布镜像</p>
<blockquote>
<p>deploy/mk/user_rpc.mk</p>
</blockquote>
<p>上面16行copy的二进制文件是由这个makefile编译的，然后调用上面那个文件</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">VERSION=latest</span><br><span class="line"></span><br><span class="line">SERVER_NAME=user</span><br><span class="line">SERVER_TYPE=rpc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试环境配置</span></span><br><span class="line"><span class="comment"># docker的镜像发布地址</span></span><br><span class="line">DOCKER_REPO_TEST=registry.cn-hangzhou.aliyuncs.com/easy-chat/$&#123;SERVER_NAME&#125;-$&#123;SERVER_TYPE&#125;-dev</span><br><span class="line"><span class="comment"># 测试版本</span></span><br><span class="line">VERSION_TEST=<span class="variable">$(VERSION)</span></span><br><span class="line"><span class="comment"># 编译的程序名称</span></span><br><span class="line">APP_NAME_TEST=easy-im-$&#123;SERVER_NAME&#125;-$&#123;SERVER_TYPE&#125;-test</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试下的编译文件</span></span><br><span class="line">DOCKER_FILE_TEST=./deploy/dockerfile/Dockerfile_$&#123;SERVER_NAME&#125;_$&#123;SERVER_TYPE&#125;_dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试环境的编译发布</span></span><br><span class="line"><span class="section">build-test:</span></span><br><span class="line">	<span class="comment"># 在这儿进行编译成二进制文件</span></span><br><span class="line">	GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o bin/$&#123;SERVER_NAME&#125;-$&#123;SERVER_TYPE&#125; ./apps/$&#123;SERVER_NAME&#125;/$&#123;SERVER_TYPE&#125;/$&#123;SERVER_NAME&#125;.go</span><br><span class="line">	<span class="comment"># 使用Dockerfile创建镜像</span></span><br><span class="line">	docker build . -f $&#123;DOCKER_FILE_TEST&#125; --no-cache -t $&#123;APP_NAME_TEST&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 镜像的测试标签</span></span><br><span class="line"><span class="section">tag-test:</span></span><br><span class="line">	<span class="comment"># 给镜像打标签</span></span><br><span class="line">	@echo &#x27;create tag $&#123;VERSION_TEST&#125;&#x27;</span><br><span class="line">		 $&#123;APP_NAME_TEST&#125; $&#123;DOCKER_REPO_TEST&#125;:$&#123;VERSION_TEST&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">publish-test:</span></span><br><span class="line">	<span class="comment"># 推送到阿里云的镜像仓库 </span></span><br><span class="line">	@echo &#x27;publish $&#123;VERSION_TEST&#125; to $&#123;DOCKER_REPO_TEST&#125;&#x27;</span><br><span class="line">	docker push <span class="variable">$(DOCKER_REPO_TEST)</span>:$&#123;VERSION_TEST&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">release-test: build-test tag-test publish-test</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Makefile</p>
</blockquote>
<p>最外层的makefile上直接引用执行上面那个mk文件</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">user-rpc-dev:</span></span><br><span class="line">	@make -f deploy/mk/user-rpc.mk release-test</span><br><span class="line"></span><br><span class="line"><span class="section">release-test: user-rpc-dev	</span></span><br></pre></td></tr></table></figure>
<p>3，准备两台机器</p>
<p>1台是开发，例如10，需要安装go</p>
<p>1台是部署环境（测试用），例如24，不需要安装go，有可执行文件就行了</p>
<p>在10上执行，切换到目录下，然后：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make release-test</span></span><br></pre></td></tr></table></figure>
<p>通过外部的Makefile，加载到内部的user_rpc.mk</p>
<p>4，Redis、ETCD等安装（全安装了）</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">etcd:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">bitnami/etcd:3.4.15</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">etcd</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3379:2379&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3380:2380&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ETCD_ENABLE_V2=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ALLOW_NONE_AUTHENTICATION=yes</span></span><br><span class="line">      <span class="comment"># 这个地址要改为服务器的地址，在哪个服务器上跑，就是那个服务器的地址，这里是24</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ETCD_ADVERTISE_CLIENT_URLS=http://192.168.117.24:3379</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ETCD_NAME=etcd</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./components/etcd/data:/bitnami/etcd/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./components/etcd/logs:/bitnami/etcd/logs</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">easy-chat:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:alpine3.18</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">16379</span><span class="string">:6379</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./components/redis/data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./components/redis/config/redis.conf:/usr/local/redis/config/redis.conf</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">easy-chat:</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">--requirepass</span> <span class="string">easy-chat</span> <span class="string">--appendonly</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">13306</span><span class="string">:3306</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./components/mysql/data:/var/lib/mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">easy-chat</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">easy-chat:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">mongo:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mongo:4.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mongo</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MONGO_INITDB_ROOT_USERNAME:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">MONGO_INITDB_ROOT_PASSWORD:</span> <span class="string">easy-chat</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">47017</span><span class="string">:27017</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./components/mongo/data:/data/db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">easy-chat:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">zookeeper:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wurstmeister/zookeeper</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">2181</span><span class="string">:2181</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">zookeeper</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">easy-chat:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">kafka:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wurstmeister/kafka</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kafka</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9092</span><span class="string">:9092</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">      <span class="attr">KAFKA_BROKER_ID:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">KAFKA_ZOOKEEPER_CONNECT:</span> <span class="string">zookeeper:2181</span></span><br><span class="line">      <span class="attr">KAFKA_CREATE_TOPICS:</span> <span class="string">&quot;ws2ms_chat:8:1,ms2ps_chat:8:1,msg_to_mongo:8:1&quot;</span></span><br><span class="line">      <span class="attr">KAFKA_ADVERTISED_LISTENERS:</span> <span class="string">INSIDE://192.168.117.24:9092</span></span><br><span class="line">      <span class="attr">KAFKA_LISTENER_SECURITY_PROTOCOL_MAP:</span> <span class="string">&quot;INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT&quot;</span></span><br><span class="line">      <span class="attr">KAFKA_INTER_BROKER_LISTENER_NAME:</span> <span class="string">INSIDE</span></span><br><span class="line">      <span class="attr">KAFKA_LISTENERS:</span> <span class="string">INSIDE://:9092</span></span><br><span class="line">      <span class="attr">KAFKA_HEAP_OPTS:</span> <span class="string">&quot;-Xmx512M -Xms256M&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zookeeper</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">easy-chat:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">apisix-dashboard:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">apache/apisix-dashboard:3.0.1-alpine</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">apisix-dashboard</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">etcd</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./components/apisix-dashboard/conf.yaml:/usr/local/apisix-dashboard/conf/conf.yaml</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9000:9000&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">easy-chat:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">apisix:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">apache/apisix:$&#123;APISIX_IMAGE_TAG:-3.2.0-debian&#125;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">apisix</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">etcd</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">apisix-dashboard</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./components/apisix/config.yaml:/usr/local/apisix/conf/config.yaml</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./components/apisix/logs:/usr/local/apisix/logs</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9180:9180/tcp&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9080:9080/tcp&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9091:9091/tcp&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9443:9443/tcp&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9093:9092/tcp&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">easy-chat:</span></span><br><span class="line">  <span class="attr">jeager:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">jaegertracing/all-in-one:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">jeager</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5775:5775/udp&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6831:6831/udp&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6832:6832/udp&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5778:5778&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;16686:16686&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;14268:14268&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9411:9411&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">easy-chat:</span></span><br><span class="line">  <span class="attr">sail:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ccr.ccs.tencentyun.com/hyy-yu/sail:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">sail</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8108:8108&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./components/sail/compose-cfg.toml:/app/cfg.toml&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">platform:</span> <span class="string">linux/arm64</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">easy-chat:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">elasticsearch:7.17.4</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./components/elasticsearch/data:/usr/share/elasticsearch/data</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;9200:9200&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;9300:9300&#x27;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;cluster.name=elasticsearch&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;discovery.type=single-node&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;ES_JAVA_OPTS=-Xms1024m -Xmx1024m&#x27;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">easy-chat:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  kibana:</span></span><br><span class="line"><span class="comment">#    image: kibana:7.17.4</span></span><br><span class="line"><span class="comment">#    container_name: kibana</span></span><br><span class="line"><span class="comment">#    restart: always</span></span><br><span class="line"><span class="comment">#    volumes:</span></span><br><span class="line"><span class="comment">#      - /etc/localtime:/etc/localtime</span></span><br><span class="line"><span class="comment">#      - ./components/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml</span></span><br><span class="line"><span class="comment">#    ports:</span></span><br><span class="line"><span class="comment">#      - &#x27;5601:5601&#x27;</span></span><br><span class="line"><span class="comment">#    links:</span></span><br><span class="line"><span class="comment">#      - elasticsearch</span></span><br><span class="line"><span class="comment">#    depends_on:</span></span><br><span class="line"><span class="comment">#      - elasticsearch</span></span><br><span class="line"><span class="comment">#    networks:</span></span><br><span class="line"><span class="comment">#      easy-chat:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">logstash:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">logstash:7.17.4</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">logstash</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./components/logstash/logs:/usr/share/logstash/logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./components/mysql/data/ad16009c6861-slow.log:/var/logs/mysql-slow.log</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./components/apisix/logs:/var/logs/apisix</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./components/logstash/pipeline:/usr/share/logstash/pipeline</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;5044:5044&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;50000:50000/tcp&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;50000:50000/udp&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;9600:9600&#x27;</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">easy-chat:</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">easy-chat:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure>
<p>为什么没有user-rpc的服务？docker-compos的构建会先从本地的镜像构建，redis的版本不会变，user-rpc的版本也不会变，这样user-rpc的每次修改，都拉取不到了</p>
<p>所以需要写一个脚本，从私有仓库中重新拉取user-rpc的最新镜像。</p>
<blockquote>
<p>deploy/script/user-rpc-test.sh</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">reso_addr=<span class="string">&#x27;registry.cn-hangzhou.aliyuncs.com/easy-chat/user-rpc-dev&#x27;</span> <span class="comment"># 私有仓库地址</span></span><br><span class="line">tag=<span class="string">&#x27;latest&#x27;</span></span><br><span class="line"></span><br><span class="line">pod_ip=<span class="string">&quot;192.168.117.24&quot;</span></span><br><span class="line"></span><br><span class="line">container_name=<span class="string">&quot;easy-chat-user-rpc-test&quot;</span> <span class="comment"># 容器名称</span></span><br><span class="line"></span><br><span class="line">docker stop <span class="variable">$&#123;container_name&#125;</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">rm</span> <span class="variable">$&#123;container_name&#125;</span></span><br><span class="line"></span><br><span class="line">docker rmi <span class="variable">$&#123;reso_addr&#125;</span>:<span class="variable">$&#123;tag&#125;</span></span><br><span class="line"></span><br><span class="line">docker pull <span class="variable">$&#123;reso_addr&#125;</span>:<span class="variable">$&#123;tag&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果需要指定配置文件</span></span><br><span class="line"><span class="comment"># -v /easy-im/config/user-rpc:/user/conf/ </span></span><br><span class="line">docker run -p 10000:10000 -e POD_IP=<span class="variable">$&#123;pod_ip&#125;</span>  --name=<span class="variable">$&#123;container_name&#125;</span> -d <span class="variable">$&#123;reso_addr&#125;</span>:<span class="variable">$&#123;tag&#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>deploy/script/release-test.sh</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">need_start_server_shell=(</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">rpc</span></span><br><span class="line">  user-rpc-test.sh</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">for i in $&#123;need_start_server_shell[*]&#125; ; do</span><br><span class="line">    chmod +x $i</span><br><span class="line">    sed &#x27;s/\r//&#x27; -i  $i</span><br><span class="line">    ./$i</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker ps</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印出key，查看服务是否注册进etcd</span></span><br><span class="line">docker exec -it etcd etcdctl get --prefix &quot;&quot; </span><br></pre></td></tr></table></figure>
<p>修改Makefile</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">install-server:</span></span><br><span class="line">	sed &#x27;s/\r//&#x27; -i  ./deploy/script/release-test.sh &amp;&amp; cd ./deploy/script &amp;&amp; chmod +x release-test.sh &amp;&amp; ./release-test.sh</span><br></pre></td></tr></table></figure>
<p>执行：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ make install-server</span><br></pre></td></tr></table></figure></p>
<p>在24上登录阿里云<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker login --username=hi340*****@aliyun.com registry.cn-hangzhou.aliyuncs.com	</span><br><span class="line">$ docker-compose up -d </span><br><span class="line"><span class="comment"># ETCD执行失败</span></span><br><span class="line">$ <span class="built_in">chmod</span> 777 -R components</span><br></pre></td></tr></table></figure></p>
<h1 id="用户服务注册与登录"><a href="#用户服务注册与登录" class="headerlink" title="用户服务注册与登录"></a>用户服务注册与登录</h1>]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go-Zero即时通讯微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>第4章 微服务必备容器化技术</title>
    <url>/2024/04/21/%E7%AC%AC4%E7%AB%A0-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BF%85%E5%A4%87%E5%AE%B9%E5%99%A8%E5%8C%96%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<p>思考并回答以下问题：</p>
<span id="more"></span>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go-Zero即时通讯微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka之Go操作实战</title>
    <url>/2023/08/12/Kafka%E4%B9%8BGo%E6%93%8D%E4%BD%9C%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<p>思考并回答以下问题：</p>
<span id="more"></span>
<h1 id="Kafka介绍"><a href="#Kafka介绍" class="headerlink" title="Kafka介绍"></a><span style="color:#339AFF;">Kafka介绍</span></h1><h2 id="Kafka-是什么"><a href="#Kafka-是什么" class="headerlink" title="Kafka 是什么"></a><span style="color:#00ACC1;">Kafka 是什么</span></h2><p>Apache Kafka 是一个开源分布式事件流平台，被数千家公司用于高性能数据管道、流分析、数据集成和任务关键型应用程序。</p>
<p>Kafka 是一种分布式的，基于发布 / 订阅的消息系统。</p>
<h2 id="Kafka优势"><a href="#Kafka优势" class="headerlink" title="Kafka优势"></a><span style="color:#00ACC1;">Kafka优势</span></h2><ul>
<li>高吞吐量，使用延迟低至 2 毫秒的机器集群以网络有限的吞吐量传递消息。</li>
<li>可扩展，将生产集群扩展到多达 1000 个代理、每天数万亿条消息、数 PB 数据、数十万个分区。弹性扩展和收缩存储和处理。</li>
<li>永久存储，将数据流安全地存储在分布式、持久、容错的集群中。</li>
<li>高可用性，在可用性区域有效地扩展集群或跨地理区域连接单独的集群。</li>
</ul>
<h2 id="Kafka的应用场景"><a href="#Kafka的应用场景" class="headerlink" title="Kafka的应用场景"></a><span style="color:#00ACC1;">Kafka的应用场景</span></h2><ul>
<li>消息队列： 典型的发布/订阅系统，解耦模块，削峰填谷</li>
<li>流处理：保存收集流数据，以提供之后对接的S流式计算框架进行处理</li>
<li>监控：Kafka作为系统消息的集中处理放，提供分析，聚合，展示系统消息日志等功能，更好监视系统情况。</li>
<li>日志系统，可实现持久日志和日志聚合，例如系统操作日志、用户行为日志，数据处理日志等</li>
</ul>
<h2 id="Kafka的核心概念"><a href="#Kafka的核心概念" class="headerlink" title="Kafka的核心概念"></a><span style="color:#00ACC1;">Kafka的核心概念</span></h2><ul>
<li>Message：消息，是通信的基本单位，每个 producer 可以向一个 topic 发布一些消息</li>
<li>Producer：生产者，将消息发布到 Kafka 特定的Topic的对象</li>
<li>Consumers：消费者，订阅并处理特定的Topic中的消息的对象</li>
<li>Broker：Kafka服务，已发布的消息保存在一组服务器中，称之为Kafka集群。集群中的每一个服务器都是一个代理(Broker). Consumer 可以订阅一个或多个Topic，并从Broker拉数据，从而消费这些已发布的Message。</li>
<li>Topic：话题，消息的类别</li>
<li>Partition：分区，Topic 物理上的分组，一个topic可以分为多个partition，每个partition是一个有序的队列。partition中的每条消息都会被分配一个有序的id</li>
</ul>
<img src="/2023/08/12/Kafka%E4%B9%8BGo%E6%93%8D%E4%BD%9C%E5%AE%9E%E6%88%98/1.png" class="">
<h1 id="启动Kafka"><a href="#启动Kafka" class="headerlink" title="启动Kafka"></a><span style="color:#339AFF;">启动Kafka</span></h1><h2 id="docker方式基于zookeeper启动"><a href="#docker方式基于zookeeper启动" class="headerlink" title="docker方式基于zookeeper启动"></a><span style="color:#00ACC1;">docker方式基于zookeeper启动</span></h2><p>此方式非常适合开发环境下使用。</p>
<img src="/2023/08/12/Kafka%E4%B9%8BGo%E6%93%8D%E4%BD%9C%E5%AE%9E%E6%88%98/2.png" class="">
<p>使用 docker compose 完成</p>
<p>创建 docker-compose.yml 文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">zookeeper:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;bitnami/zookeeper:latest&#x27;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;2181:2181&#x27;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ALLOW_ANONYMOUS_LOGIN=yes</span></span><br><span class="line">  <span class="attr">kafka:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;bitnami/kafka:latest&#x27;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;9092:9092&#x27;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_BROKER_ID=1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_LISTENERS=PLAINTEXT://:9092</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ALLOW_PLAINTEXT_LISTENER=yes</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zookeeper</span></span><br></pre></td></tr></table></figure>
<p>配置说明：</p>
<ul>
<li>zookeeper服务<ul>
<li>允许匿名登陆，- ALLOW_ANONYMOUS_LOGIN=yes</li>
</ul>
</li>
<li>kafka服务<ul>
<li>唯一ID，KAFKA_BROKER_ID=1</li>
<li>监听端口，KAFKA_CFG_LISTENERS=PLAINTEXT://:9092</li>
<li>广播访问地址，KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092</li>
<li>Zookeeper连接地址，KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181</li>
<li>依赖于zookeeper服务</li>
</ul>
</li>
</ul>
<p>启动容器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">linux：</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">$ docker compose up -d</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">windows：</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&gt; docker-compose up -d</span></span><br><span class="line"> docker-compose up -d</span><br><span class="line">[+] Running 2/2</span><br><span class="line"> - Container gokafka-zookeeper-1  Started                                                      1.6s</span><br><span class="line"> - Container gokafka-kafka-1      Started                                                      2.7s</span><br></pre></td></tr></table></figure>
<h2 id="docker方式基于zookeeper启动集群"><a href="#docker方式基于zookeeper启动集群" class="headerlink" title="docker方式基于zookeeper启动集群"></a><span style="color:#00ACC1;">docker方式基于zookeeper启动集群</span></h2><p>docker-compose.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">zookeeper:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;bitnami/zookeeper:latest&#x27;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;2181:2181&#x27;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ALLOW_ANONYMOUS_LOGIN=yes</span></span><br><span class="line">  <span class="attr">kafka2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;bitnami/kafka:latest&#x27;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;9292:9292&#x27;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_BROKER_ID=2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_LISTENERS=PLAINTEXT://:9292</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9292</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ALLOW_PLAINTEXT_LISTENER=yes</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zookeeper</span></span><br><span class="line">  <span class="attr">kafka3:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;bitnami/kafka:latest&#x27;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;9392:9392&#x27;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_BROKER_ID=3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_LISTENERS=PLAINTEXT://:9392</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9392</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ALLOW_PLAINTEXT_LISTENER=yes</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zookeeper</span></span><br></pre></td></tr></table></figure>
<p>配置说明</p>
<ul>
<li>整体结构与单个服务一致</li>
<li>每个服务不同的 KAFKA_BROKER_ID</li>
<li>每个服务不同的端口</li>
<li>多个Kafka 使用同一个Zookeeper</li>
</ul>
<h2 id="docker方式基于kraft启用开发环境"><a href="#docker方式基于kraft启用开发环境" class="headerlink" title="docker方式基于kraft启用开发环境"></a>docker方式基于kraft启用开发环境</h2><p>docker-compose.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">   <span class="attr">kafka:</span></span><br><span class="line">     <span class="attr">image:</span> <span class="string">&#x27;bitnami/kafka:latest&#x27;</span></span><br><span class="line">     <span class="attr">ports:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">&#x27;9092:9092&#x27;</span></span><br><span class="line">     <span class="attr">environment:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">KAFKA_ENABLE_KRAFT=yes</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">KAFKA_CFG_PROCESS_ROLES=broker,controller</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">KAFKA_BROKER_ID=1</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@127.0.0.1:9093</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">ALLOW_PLAINTEXT_LISTENER=yes</span></span><br></pre></td></tr></table></figure>
<h1 id="Go-操作-Kafka"><a href="#Go-操作-Kafka" class="headerlink" title="Go 操作 Kafka"></a>Go 操作 Kafka</h1><h2 id="常用包"><a href="#常用包" class="headerlink" title="常用包"></a>常用包</h2><ul>
<li><a href="https://github.com/Shopify/sarama">Shopify/sarama</a>，Go语言实现的Kafka客户端</li>
<li><a href="https://github.com/confluentinc/confluent-kafka-go">confluentinc/confluent-<em>kafka</em>-go</a></li>
</ul>
<h2 id="Shopify-sarama-基本使用"><a href="#Shopify-sarama-基本使用" class="headerlink" title="Shopify/sarama 基本使用"></a>Shopify/sarama 基本使用</h2><h2 id="同步发送消息"><a href="#同步发送消息" class="headerlink" title="同步发送消息"></a>同步发送消息</h2><p>基础示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;github.com/Shopify/sarama&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 同步 Producer</span></span><br><span class="line">    producer, err := sarama.NewSyncProducer([]<span class="type">string</span>&#123;<span class="string">&quot;localhost:9092&quot;</span>&#125;, <span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalln(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> err := producer.Close(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Fatalln(err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// message, Topic, Value</span></span><br><span class="line">    msg := &amp;sarama.ProducerMessage&#123;</span><br><span class="line">        Topic: <span class="string">&quot;sync_topic&quot;</span>,</span><br><span class="line">        Value: sarama.StringEncoder(<span class="string">&quot;MaShiBing Go.&quot;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    partition, offset, err := producer.SendMessage(msg)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Printf(<span class="string">&quot;FAILED to send message: %s\n&quot;</span>, err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        log.Printf(<span class="string">&quot;message sent to partition %d at offset %d\n&quot;</span>, partition, offset)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="异步发送消息"><a href="#异步发送消息" class="headerlink" title="异步发送消息"></a>异步发送消息</h2><p>异步Producer使用三个channel来通信：</p>
<ul>
<li>producer.Input()，发送消息</li>
<li>producer.Errors()，默认开启，错误信息</li>
<li>producer.Successes()，默认关闭，成功的响应</li>
</ul>
<h3 id="使用-select-处理发送结果"><a href="#使用-select-处理发送结果" class="headerlink" title="使用 select 处理发送结果"></a>使用 select 处理发送结果</h3><p>基础示例代码，发送消息和处理错误：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 异步Producer</span></span><br><span class="line">conf := sarama.NewConfig()</span><br><span class="line"><span class="comment">//conf.Producer.Return.Successes = true</span></span><br><span class="line">producer, err := sarama.NewAsyncProducer([]<span class="type">string</span>&#123;<span class="string">&quot;localhost:9092&quot;</span>&#125;, conf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err := producer.Close(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalln(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Signals 用来处理关闭信号</span></span><br><span class="line">signals := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</span><br><span class="line">signal.Notify(signals, os.Interrupt)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> enqueued, successes, producerErrors <span class="type">int</span></span><br><span class="line">ProducerLoop:</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> producer.Input() &lt;- &amp;sarama.ProducerMessage&#123;</span><br><span class="line">            Topic: <span class="string">&quot;async_topic&quot;</span>, Value: sarama.StringEncoder(<span class="string">&quot;MaShibing go.&quot;</span>),</span><br><span class="line">        &#125;:</span><br><span class="line">        enqueued++</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">case</span> err := &lt;-producer.Errors():</span><br><span class="line">        log.Println(<span class="string">&quot;Failed to produce message&quot;</span>, err)</span><br><span class="line">        producerErrors++</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">case</span> suc := &lt;-producer.Successes():</span><br><span class="line">            successes++</span><br><span class="line">            fmt.Println(<span class="string">&quot;offset: &quot;</span>, suc.Offset, <span class="string">&quot;partition: &quot;</span>, suc.Partition)</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">case</span> &lt;-signals:</span><br><span class="line">        <span class="keyword">break</span> ProducerLoop</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">&quot;Enqueued: %d; errors: %d\n&quot;</span>, enqueued, producerErrors)</span><br></pre></td></tr></table></figure>
<p>代码说明:</p>
<ul>
<li>使用 Input() 发送消息</li>
<li>使用 Errors() 处理error</li>
<li>使用 Successes() 处理成功发送</li>
<li>for select，保持channel的多路操作</li>
<li>使用信号控制进程关闭</li>
</ul>
<h3 id="使用-goroutine-处理发送结果"><a href="#使用-goroutine-处理发送结果" class="headerlink" title="使用 goroutine 处理发送结果"></a>使用 goroutine 处理发送结果</h3><p>基础示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">config := sarama.NewConfig()</span><br><span class="line">config.Producer.Return.Successes = <span class="literal">true</span></span><br><span class="line">producer, err := sarama.NewAsyncProducer([]<span class="type">string</span>&#123;<span class="string">&quot;localhost:9092&quot;</span>&#125;, config)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="keyword">var</span> enqueued, successes, producerErrors <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    wg.Add(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">defer</span> wg.Done()</span><br><span class="line">    <span class="keyword">for</span> suc := <span class="keyword">range</span> producer.Successes() &#123;</span><br><span class="line">        successes++</span><br><span class="line">        fmt.Println(<span class="string">&quot;offset: &quot;</span>, suc.Offset, <span class="string">&quot;partition: &quot;</span>, suc.Partition)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    wg.Add(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">defer</span> wg.Done()</span><br><span class="line">    <span class="keyword">for</span> err := <span class="keyword">range</span> producer.Errors() &#123;</span><br><span class="line">        log.Println(err)</span><br><span class="line">        producerErrors++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Trap SIGINT to trigger a graceful shutdown.</span></span><br><span class="line">signals := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</span><br><span class="line">signal.Notify(signals, os.Interrupt)</span><br><span class="line"></span><br><span class="line">ProducerLoop:</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    message := &amp;sarama.ProducerMessage&#123;Topic: <span class="string">&quot;my_topic&quot;</span>, Value: sarama.StringEncoder(<span class="string">&quot;testing 123&quot;</span>)&#125;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> producer.Input() &lt;- message:</span><br><span class="line">        enqueued++</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> &lt;-signals:</span><br><span class="line">        producer.AsyncClose() <span class="comment">// Trigger a shutdown of the producer.</span></span><br><span class="line">        <span class="keyword">break</span> ProducerLoop</span><br><span class="line">    &#125;</span><br><span class="line">    time.Sleep(<span class="number">500</span> * time.Millisecond)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wg.Wait()</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">&quot;Successfully produced: %d; errors: %d\n&quot;</span>, successes, producerErrors)</span><br></pre></td></tr></table></figure>
<p>代码说明：</p>
<ul>
<li>使用信号控制终止</li>
<li>使用 goroutine 处理error</li>
<li>使用 goroutine 处理success</li>
<li>waitGroup 控制goroutine</li>
<li>for select 保持发送状态，监听信号</li>
</ul>
<h2 id="消费消息"><a href="#消费消息" class="headerlink" title="消费消息"></a>消费消息</h2><h3 id="仅有一个0分区的消费"><a href="#仅有一个0分区的消费" class="headerlink" title="仅有一个0分区的消费"></a>仅有一个0分区的消费</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">    consumer, err := sarama.NewConsumer([]<span class="type">string</span>&#123;<span class="string">&quot;localhost:9092&quot;</span>&#125;, <span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalln(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> err := consumer.Close(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Fatalln(err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    partitionConsumer, err := consumer.ConsumePartition(<span class="string">&quot;async_topic&quot;</span>, <span class="number">0</span>, sarama.OffsetNewest)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalln(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> err := partitionConsumer.Close(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Fatalln(err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Trap SIGINT to trigger a shutdown.</span></span><br><span class="line">    signals := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</span><br><span class="line">    signal.Notify(signals, os.Interrupt)</span><br><span class="line"></span><br><span class="line">    consumed := <span class="number">0</span></span><br><span class="line">ConsumerLoop:</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> msg := &lt;-partitionConsumer.Messages():</span><br><span class="line">            log.Printf(<span class="string">&quot;Consumed message offset %d\n&quot;</span>, msg.Offset)</span><br><span class="line">            consumed++</span><br><span class="line">        <span class="keyword">case</span> &lt;-signals:</span><br><span class="line">            <span class="keyword">break</span> ConsumerLoop</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.Printf(<span class="string">&quot;Consumed: %d\n&quot;</span>, consumed)</span><br></pre></td></tr></table></figure>
<p>代码说明：</p>
<ul>
<li>消费某个topic的某个partition中的message</li>
<li>consumer.ConsumePartition() 获取某个topic具体分区上的消费者</li>
<li>partitionConsumer.Messages() channel 用于获取消息</li>
</ul>
<h3 id="多个分区消费者，goroutine消费"><a href="#多个分区消费者，goroutine消费" class="headerlink" title="多个分区消费者，goroutine消费"></a>多个分区消费者，goroutine消费</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一，获取消费者</span></span><br><span class="line">consumer, err := sarama.NewConsumer([]<span class="type">string</span>&#123;<span class="string">&quot;localhost:9092&quot;</span>&#125;, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err := consumer.Close(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalln(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二，获取某个topic下的全部分区</span></span><br><span class="line">topic := <span class="string">&quot;async_topic&quot;</span></span><br><span class="line">partitions, err := consumer.Partitions(topic)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三，遍历全部分区id，每个分区，完成分区消费</span></span><br><span class="line">consumed := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _, partition := <span class="keyword">range</span> partitions &#123;</span><br><span class="line">    partitionConsumer, err := consumer.ConsumePartition(topic, partition, sarama.OffsetNewest)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalln(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每个分区消费者，在独立的goroutine中完成消费</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(pc sarama.PartitionConsumer)</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> err := pc.Close(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">                log.Fatalln(err)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 消费</span></span><br><span class="line">        <span class="keyword">for</span> msg := <span class="keyword">range</span> pc.Messages() &#123;</span><br><span class="line">            log.Printf(<span class="string">&quot;Consumed message, partition: %d, offset: %d, topic: %s, value: %s\n&quot;</span>, msg.Partition, msg.Offset, msg.Topic, msg.Value)</span><br><span class="line"></span><br><span class="line">            consumed++</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;(partitionConsumer)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">signals := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</span><br><span class="line">signal.Notify(signals, os.Interrupt)</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-signals:</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">&quot;Consumed: %d\n&quot;</span>, consumed)</span><br></pre></td></tr></table></figure>
<p>代码说明：</p>
<ul>
<li>consumer.Partitions(topic) 获取某个topic下的全部分区id，[]int32</li>
<li>goroutine 完成每个partitionConsumer的消费</li>
<li>for range paritition.Messages() 读取消息</li>
</ul>
<h2 id="自定义消息编码器"><a href="#自定义消息编码器" class="headerlink" title="自定义消息编码器"></a>自定义消息编码器</h2><p>不同Message类型是基于不同类型编码器实现的。设置消息时，Message的结构为：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> ProducerMessage <span class="keyword">struct</span> &#123;</span><br><span class="line">    Topic <span class="type">string</span> <span class="comment">// The Kafka topic for this message.</span></span><br><span class="line">    <span class="comment">// The actual message to store in Kafka. Pre-existing Encoders include</span></span><br><span class="line">    <span class="comment">// StringEncoder and ByteEncoder.</span></span><br><span class="line">    Value Encoder</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 其他字段略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其中 Encoder</span></span><br><span class="line"><span class="comment">// Encoder is a simple interface for any type that can be encoded as an array of bytes</span></span><br><span class="line"><span class="comment">// in order to be sent as the key or value of a Kafka message. Length() is provided as an</span></span><br><span class="line"><span class="comment">// optimization, and must return the same as len() on the result of Encode().</span></span><br><span class="line"><span class="keyword">type</span> Encoder <span class="keyword">interface</span> &#123;</span><br><span class="line">    Encode() ([]<span class="type">byte</span>, <span class="type">error</span>)</span><br><span class="line">    Length() <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Value 为 Encoder Interface 类型。Sarama 预置了两个Encoder：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> StringEncoder <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ByteEncoder []<span class="type">byte</span></span><br></pre></td></tr></table></figure>
<p>我们可以自定义Encoder：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Event <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">    Type <span class="type">string</span></span><br><span class="line">    Time time.Time</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Event类型的Encoder</span></span><br><span class="line"><span class="keyword">type</span> EventEncoder Event</span><br><span class="line"></span><br><span class="line"><span class="comment">// 采用JSON编码</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e EventEncoder)</span></span> Encode() ([]<span class="type">byte</span>, <span class="type">error</span>) &#123;</span><br><span class="line">    b, err := json.Marshal(e)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e EventEncoder)</span></span> Length() <span class="type">int</span> &#123;</span><br><span class="line">    b, err := json.Marshal(e)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>发送Message时，使用自定义的Encoder：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">value := Event&#123;</span><br><span class="line">    Name: <span class="string">&quot;MaShiBing&quot;</span>,</span><br><span class="line">    Type: <span class="string">&quot;Buy&quot;</span>,</span><br><span class="line">    Time: time.Now(),</span><br><span class="line">&#125;</span><br><span class="line">msg := &amp;sarama.ProducerMessage&#123;</span><br><span class="line">    Topic: <span class="string">&quot;encode_topic&quot;</span>,</span><br><span class="line">    Value: EventEncoder(value),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>消费Message时，需要手动解码，因为获取的内容都是 []byte 类型，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> msg := &lt;-partitionConsumer.Messages():</span><br><span class="line">    evt := Event&#123;&#125;</span><br><span class="line">    err := json.Unmarshal(msg.Value, &amp;evt)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalln(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="发送消息的-ACK-配置"><a href="#发送消息的-ACK-配置" class="headerlink" title="发送消息的 ACK 配置"></a>发送消息的 ACK 配置</h2><p>通过配置指定producer在发送消息时的ack策略：</p>
<ul>
<li>Request.required.acks=-1，全量同步确认，强可靠性保证</li>
<li>Request.required.acks = 1，leader 确认收到，</li>
<li>Request.required.acks = 0 ，不确认，可以提高吞吐量</li>
</ul>
<p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/13080/1669142590013/10a4c43a0aee47369c2c4016d3965a56.png" alt="image.png"></p>
<p>sarama 提供三个常量分别表示以上三个配置：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    <span class="comment">// NoResponse doesn&#x27;t send any response, the TCP ACK is all you get.</span></span><br><span class="line">    NoResponse RequiredAcks = <span class="number">0</span></span><br><span class="line">    <span class="comment">// WaitForLocal waits for only the local commit to succeed before responding.</span></span><br><span class="line">    WaitForLocal RequiredAcks = <span class="number">1</span></span><br><span class="line">    <span class="comment">// WaitForAll waits for all in-sync replicas to commit before responding.</span></span><br><span class="line">    <span class="comment">// The minimum number of in-sync replicas is configured on the broker via</span></span><br><span class="line">    <span class="comment">// the `min.insync.replicas` configuration key.</span></span><br><span class="line">    WaitForAll RequiredAcks = <span class="number">-1</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>不同配置的原则：</p>
<ul>
<li>NoResponse， 0，高吞吐，对一致性要求不高</li>
<li>WaitForLocal，1，AP，基本一致性+分区容忍</li>
<li>WaitForAll，-1，CP，强一致性+分区容忍</li>
</ul>
<p>在获取生产者时，通过配置进行指定：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">conf := sarama.NewConfig()</span><br><span class="line"><span class="comment">// 开启 Success channel 来接收发送成功的信息</span></span><br><span class="line">conf.Producer.Return.Successes = <span class="literal">true</span></span><br><span class="line">conf.Producer.RequiredAcks = sarama.NoResponse</span><br><span class="line">conf.Producer.RequiredAcks = sarama.WaitForLocal</span><br><span class="line">conf.Producer.RequiredAcks = sarama.WaitForAll</span><br><span class="line">producer, err := sarama.NewAsyncProducer(brokers, conf)</span><br></pre></td></tr></table></figure>
<h2 id="Topic-的分区"><a href="#Topic-的分区" class="headerlink" title="Topic 的分区"></a>Topic 的分区</h2><p>Kafka 中 Topic 被分成多个 Partition 分区。Topic 是一个逻辑概念，Partition 是最小的存储单元，掌握着一个 Topic 的部分数据。每个 Partition 都是一个单独的 log 文件，每条记录都以追加的形式写入。</p>
<p>Partition 中的每条记录都会被分配一个唯一的序号，称为 <strong>Offset</strong>（偏移量）。Offset 是一个递增的、不可变的数字，由 Kafka 自动维护。当一条记录写入 Partition 的时候，它就被追加到 log 文件的末尾，并被分配一个序号，作为 Offset。</p>
<p>消息的顺序性需要注意，一个 Topic 如果有多个 Partition 的话，那么从 Topic 这个层面来看，消息是无序的。但单独看 Partition 的话，Partition 内部消息是有序的。所以，一个 Partition 内部消息有序，一个 Topic 跨 Partition 是无序的。如果强制要求 Topic 整体有序，就只能让 Topic 只有一个 Partition。</p>
<p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/13080/1669142590013/ef047bc4a2b743eba12ff09643c2ea8b.png" alt="image.png"></p>
<p>创建多个分区的 topic 代码示例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">broker := sarama.NewBroker(<span class="string">&quot;localhost:9092&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Additional configurations. Check sarama doc for more info</span></span><br><span class="line">    config := sarama.NewConfig()</span><br><span class="line">    <span class="keyword">if</span> err := broker.Open(config); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalln(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        _ = broker.Close()</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Setup the Topic details in CreateTopicRequest struct</span></span><br><span class="line">    topic := <span class="string">&quot;topicKey&quot;</span></span><br><span class="line">    topicDetail := &amp;sarama.TopicDetail&#123;&#125;</span><br><span class="line">    topicDetail.NumPartitions = <span class="number">3</span></span><br><span class="line">    topicDetail.ReplicationFactor = <span class="number">1</span></span><br><span class="line">    <span class="comment">//topicDetail.ConfigEntries = make(map[string]*string)</span></span><br><span class="line"></span><br><span class="line">    topicDetails := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]*sarama.TopicDetail)</span><br><span class="line">    topicDetails[topic] = topicDetail</span><br><span class="line"></span><br><span class="line">    request := sarama.CreateTopicsRequest&#123;</span><br><span class="line">        Timeout:      time.Second * <span class="number">15</span>,</span><br><span class="line">        TopicDetails: topicDetails,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Send request to Broker</span></span><br><span class="line">    response, err := broker.CreateTopics(&amp;request)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// handle errors if any</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Printf(<span class="string">&quot;%#v&quot;</span>, &amp;err)</span><br><span class="line">    &#125;</span><br><span class="line">    t := response.TopicErrors</span><br><span class="line">    <span class="keyword">for</span> key, val := <span class="keyword">range</span> t &#123;</span><br><span class="line">        log.Printf(<span class="string">&quot;Key is %s&quot;</span>, key)</span><br><span class="line">        log.Printf(<span class="string">&quot;Value is %#v&quot;</span>, val.Err.Error())</span><br><span class="line">        log.Printf(<span class="string">&quot;Value3 is %#v&quot;</span>, val.ErrMsg)</span><br><span class="line">    &#125;</span><br><span class="line">    log.Printf(<span class="string">&quot;the response is %#v&quot;</span>, response)</span><br></pre></td></tr></table></figure>
<p>代码说明：</p>
<ul>
<li>Broker 类型，用于操作某个Broker</li>
<li>操作Broker是利用Request-Response方式完成的</li>
<li>sarama.TopicDetail，用于描述Topic属性</li>
<li>CreateTopicsRequest，创建Topic请求的描述类型</li>
<li>broker.CreateTopics，用于发送创建Topic请求，会得到Response，err</li>
</ul>
<h2 id="生产者的分区选择策略"><a href="#生产者的分区选择策略" class="headerlink" title="生产者的分区选择策略"></a>生产者的分区选择策略</h2><p>Producer 如何将Message发送到特定的分区？</p>
<p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/13080/1669142590013/aa0016e746e14b8baaba20b9a25ad262.png" alt="image.png"></p>
<p>sarama 中使用如下的配置，更改分区策略：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 随机选择</span></span><br><span class="line">conf.Producer.Partitioner = sarama.NewRandomPartitioner</span><br><span class="line"><span class="comment">// 轮循</span></span><br><span class="line">conf.Producer.Partitioner = sarama.NewRoundRobinPartitioner</span><br><span class="line"><span class="comment">// Hash</span></span><br><span class="line">conf.Producer.Partitioner = sarama.NewHashPartitioner</span><br><span class="line"><span class="comment">// 自定义Hash算法</span></span><br><span class="line">conf.Producer.Partitioner = sarama.NewCustomHashPartitioner</span><br><span class="line"><span class="comment">// 手动指定</span></span><br><span class="line">conf.Producer.Partitioner = sarama.NewManualPartitioner</span><br><span class="line"><span class="comment">// 自定义</span></span><br><span class="line">conf.Producer.Partitioner = sarama.NewCustomPartitioner()</span><br></pre></td></tr></table></figure>
<p>示例代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 随机选择</span><br><span class="line">conf.Producer.Partitioner = sarama.NewRandomPartitioner</span><br><span class="line">// 轮循</span><br><span class="line">conf.Producer.Partitioner = sarama.NewRoundRobinPartitioner</span><br><span class="line"></span><br><span class="line">// Hash</span><br><span class="line">conf.Producer.Partitioner = sarama.NewHashPartitioner</span><br><span class="line">// 配合 Key 使用</span><br><span class="line">sarama.ProducerMessage&#123;</span><br><span class="line">    Topic: &quot;&quot;,</span><br><span class="line">    Value: sarama.StringEncoder(&quot;&quot;),</span><br><span class="line">    Key: sarama.StringEncoder(&quot;mashibing&quot;),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 自定义Hash算法，需要完成hash32的函数</span><br><span class="line">conf.Producer.Partitioner = sarama.NewCustomHashPartitioner(func() hash.Hash32 &#123;</span><br><span class="line">//poly: x³²+ x³¹+ x²⁴+ x²²+ x¹⁶+ x¹⁴+ x⁸+ x⁷+ x⁵+ x³+ x¹+ x⁰</span><br><span class="line">//0b11010101100000101000001010000001</span><br><span class="line">return crc32.New(crc32.MakeTable(0xD5828281))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 手动指定</span><br><span class="line">conf.Producer.Partitioner = sarama.NewManualPartitioner</span><br><span class="line">// 配合 Partition 使用</span><br><span class="line">sarama.ProducerMessage&#123;</span><br><span class="line">    Topic: &quot;&quot;,</span><br><span class="line">    Value: sarama.StringEncoder(&quot;&quot;),</span><br><span class="line">    Partition: 1,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="消费者的分区分配策略"><a href="#消费者的分区分配策略" class="headerlink" title="消费者的分区分配策略"></a>消费者的分区分配策略</h2><p>参考：多个分区消费者即可！</p>
<p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/13080/1669142590013/71cfd5ea8816462387df417b09c270fe.png" alt="image.png"></p>
<p>针对于同一个主题的多个分区，每个分区构建一个分区消费者并发执行，即可完成主题下全部分区的消息消费。</p>
<p>核心代码：消费者消费分区。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func (Consumer) ConsumePartition(topic string, partition int32, offset int64) (PartitionConsumer, error)</span><br></pre></td></tr></table></figure>
<h2 id="消费组消费消息"><a href="#消费组消费消息" class="headerlink" title="消费组消费消息"></a>消费组消费消息</h2><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/13080/1669142590013/71cfd5ea8816462387df417b09c270fe.png" alt="image.png"></p>
<p>在Kafka中，Topic的可能会有很多的Message，如果仅仅使用单独的Consumer进程消费，消费的速度会非常慢，所以我们需要使用多个消费者同时消费一个topic中的消息，这些多个消费者就组成了消费组。这样同一个消费组的多个消费者就能分布到多个节点上以加速消费。</p>
<p>消费组有独立的标识。一个组内可以存在一个或多个消费者。对于消费组来说，topic 中每条数据只要被消费组内任何一个消费者消费一次，那么这条数据就可以认定被当前消费组消费成功。</p>
<p>总结消费组有如下特征：</p>
<ol>
<li>每个消费组有一个或者多个消费者</li>
<li>每个消费组拥有唯一的标识</li>
<li>组内消费者消费消息，认为组消费成功</li>
<li>topic 的每个partition只能分配给一个消费者独立消费</li>
</ol>
<p>示例代码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;context&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/Shopify/sarama&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;os/signal&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分组消费</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一，创建消费者组</span></span><br><span class="line">    addrs := []<span class="type">string</span>&#123;<span class="string">&quot;localhost:9092&quot;</span>&#125;</span><br><span class="line">    groupID := <span class="string">&quot;mashibingGroup&quot;</span></span><br><span class="line">    conf := sarama.NewConfig()</span><br><span class="line">    <span class="comment">// 消费信道返回</span></span><br><span class="line">    conf.Consumer.Return.Errors = <span class="literal">true</span></span><br><span class="line">    group, err := sarama.NewConsumerGroup(addrs, groupID, conf)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalln(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        _ = group.Close()</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 二，处理group的错误</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> err := <span class="keyword">range</span> group.Errors() &#123;</span><br><span class="line">            log.Println(err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 三，组消费</span></span><br><span class="line">    <span class="comment">// 带有 cancel context</span></span><br><span class="line">    topics := []<span class="type">string</span>&#123;<span class="string">&quot;topic_more_partition_1&quot;</span>&#125;</span><br><span class="line">    ctx, cancel := context.WithCancel(context.Background())</span><br><span class="line">    wg := &amp;sync.WaitGroup&#123;&#125;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">defer</span> wg.Done()</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            <span class="comment">// 每当组内消费者成员改变时，重新执行，重新分配</span></span><br><span class="line">            <span class="comment">// for 保证重新执行</span></span><br><span class="line">            handler := GroupConsumeHandler&#123;&#125;</span><br><span class="line">            <span class="keyword">if</span> err := group.Consume(ctx, topics, handler); err != <span class="literal">nil</span> &#123;</span><br><span class="line">                log.Println(err)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判定 context 是否cancel</span></span><br><span class="line">            <span class="keyword">if</span> ctx.Err() != <span class="literal">nil</span> &#123;</span><br><span class="line">                log.Println(ctx.Err())</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 信号阻塞</span></span><br><span class="line">    signals := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</span><br><span class="line">    signal.Notify(signals, os.Interrupt)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-signals:</span><br><span class="line">        <span class="comment">// 终止</span></span><br><span class="line">        cancel()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 零，定义组消费处理器 group consume handler</span></span><br><span class="line"><span class="keyword">type</span> GroupConsumeHandler <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新消费时执行，增减组内消费者时，会执行</span></span><br><span class="line"><span class="comment">// ConsumerGroupSession，消费者组会话</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(GroupConsumeHandler)</span></span> Setup(cgs sarama.ConsumerGroupSession) <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当组内消费者退出时执行</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(GroupConsumeHandler)</span></span> Cleanup(sarama.ConsumerGroupSession) <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组消费的核心方法</span></span><br><span class="line"><span class="comment">// ConsumerGroupSession，消费者组会话</span></span><br><span class="line"><span class="comment">// sarama.ConsumerGroupClaim 组资产数据，使用该参数，完成消息的消费</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(GroupConsumeHandler)</span></span> ConsumeClaim(cgs sarama.ConsumerGroupSession, cgc sarama.ConsumerGroupClaim) <span class="type">error</span> &#123;</span><br><span class="line">    <span class="comment">// 不要 goroutine 中完成，因为group会自动goroutine完成</span></span><br><span class="line">    <span class="comment">// 消费</span></span><br><span class="line">    <span class="keyword">for</span> msg := <span class="keyword">range</span> cgc.Messages() &#123;</span><br><span class="line">        log.Printf(<span class="string">&quot;Consumed message, partition: %d, offset: %d\n&quot;</span>, msg.Partition, msg.Offset)</span><br><span class="line">        <span class="comment">// 标记该消息已经被消费</span></span><br><span class="line">        cgs.MarkMessage(msg, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码说明：</p>
<ul>
<li>GroupConsumeHandler，用来控制消费的处理器<ul>
<li>Setup，新会话开始时, 完成初始化的功能，可以通过参数 ConsumerGroupSession，来获取当前消费者信息，针对有当前消费者，做一些设置，例如起始消费的偏移量offset</li>
<li>Cleanup，会话结束时</li>
<li>ConsumeClaim，用于完成消费</li>
</ul>
</li>
<li>组内的消费者变化，会触发每个消费者会话的新的生命周期，会执行对应的 setup, consumeClaim, cleanup,</li>
<li>每启动一个进程，就表示一个消费者，多个消费者拥有相同的 groupID，表示位于同一个组内</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(GroupConsumeHandler)</span></span> Setup(cgs sarama.ConsumerGroupSession) <span class="type">error</span> &#123;</span><br><span class="line">    log.Println(<span class="string">&quot;setup&quot;</span>)</span><br><span class="line">    log.Println(cgs.Claims())</span><br><span class="line">    cgs.ResetOffset(<span class="string">&quot;topic_more_partition_1&quot;</span>, <span class="number">0</span>, <span class="number">2048</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="消费者组的分配策略"><a href="#消费者组的分配策略" class="headerlink" title="消费者组的分配策略"></a>消费者组的分配策略</h2><p>将分区的所有权从一个消费者移到另一个消费者称为重新平衡（rebalance），以下事件发生时，将会进行一次分区分配：</p>
<ul>
<li>Consumer Group 增减消费者</li>
<li>订阅的主题新增分区</li>
</ul>
<p>（kafka）sarama 内置了3种分配策略：</p>
<ul>
<li>Range，范围</li>
<li>RoundRobin，轮循</li>
<li>Sticky，粘性</li>
</ul>
<p><strong>Range：</strong></p>
<p>Range，根据分区数量，确定每个消费者分配几个分区，有多余的分区，前面的分区先分配。</p>
<p>1Topic，10Partition，3Consumer</p>
<p>C1, T-0, T-1, T-2, T-3</p>
<p>C2, T-4, T-5, T-6</p>
<p>C3, T-7, T-8, T-9</p>
<p>如果组内conSumer关注了多个 topic，会导致，前面的consumer多分配很多分区。</p>
<p><strong>RoundRobin：</strong></p>
<p>将全部订阅的Topic和partition作为一个整体，轮流分配：</p>
<p>1Topic，10Partition，3Consumer</p>
<p>C1, T-0, T-3, T-6, T-9</p>
<p>C2, T-1, T-4, T-7</p>
<p>C3, T-2, T-5, T-8</p>
<p>如果存在其他Topic，继续轮着来，C2 获取 T1-0，以此类推。</p>
<p><strong>Sticky：</strong></p>
<p>一种更加优化的分配方案，目的：</p>
<ol>
<li>分区的分配要尽可能的均匀，分配给消费者者的主题分区数最多相差一个</li>
<li>分区的分配尽可能的与上次分配的保持相同，也就是当消费者变化时，Reblance操作，尽量保证原来分配的分区还在</li>
</ol>
<p>分配策略示例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 优先顺序配置</span></span><br><span class="line">    <span class="comment">// 找到第一个，组内全部的consumer都支持的策略作为分配策略</span></span><br><span class="line">    conf.Consumer.Group.Rebalance.GroupStrategies = []sarama.BalanceStrategy&#123;</span><br><span class="line">        sarama.BalanceStrategySticky,     <span class="comment">// 新的更加优化的分配策略</span></span><br><span class="line">        sarama.BalanceStrategyRange,      <span class="comment">// default</span></span><br><span class="line">        sarama.BalanceStrategyRoundRobin, <span class="comment">//</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
</search>
